var _user$project$Haggis_Combination$maybe = function (card) {
	return A2(
		_elm_lang$core$Maybe$map,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Maybe$Just(card));
};
var _user$project$Haggis_Combination$allRanksConsecutive = function (cards) {
	var _p0 = cards;
	if (_p0.ctor === '[]') {
		return false;
	} else {
		if (_p0._1.ctor === '[]') {
			var _p1 = _p0._0;
			if (_p1.ctor === 'Just') {
				return true;
			} else {
				return false;
			}
		} else {
			var _p2 = {ctor: '_Tuple2', _0: _p0._0, _1: _p0._1._0};
			if (((_p2.ctor === '_Tuple2') && (_p2._0.ctor === 'Just')) && (_p2._1.ctor === 'Just')) {
				var _p3 = _p2._1._0;
				return _elm_lang$core$Native_Utils.eq(_p2._0._0.order + 1, _p3.order) && _user$project$Haggis_Combination$allRanksConsecutive(
					A2(
						_elm_lang$core$List_ops['::'],
						_user$project$Haggis_Combination$maybe(_p3),
						_p0._1._1));
			} else {
				return false;
			}
		}
	}
};
var _user$project$Haggis_Combination$collectOneofEachRank = _elm_lang$core$List$map(
	function (s) {
		return _elm_lang$core$List$head(s);
	});
var _user$project$Haggis_Combination$allSetsConsecutive = function (sets) {
	return _user$project$Haggis_Combination$allRanksConsecutive(
		_user$project$Haggis_Combination$collectOneofEachRank(sets));
};
var _user$project$Haggis_Combination$collectSuits = function (set) {
	return A2(
		_elm_lang$core$List$sortWith,
		_user$project$Haggis_Card$compareSuits,
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.suit;
			},
			set));
};
var _user$project$Haggis_Combination$missingSuit = F2(
	function (set, set$) {
		var _p4 = A2(
			_elm_lang$core$List$sortBy,
			_elm_lang$core$List$length,
			_elm_lang$core$Native_List.fromArray(
				[
					_user$project$Haggis_Combination$collectSuits(set),
					_user$project$Haggis_Combination$collectSuits(set$)
				]));
		if (((_p4.ctor === '::') && (_p4._1.ctor === '::')) && (_p4._1._1.ctor === '[]')) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				_user$project$Haggis_Card$Wild,
				A2(
					_elm_community$elm_list_extra$List_Extra$find,
					function (suit) {
						return A2(_elm_community$elm_list_extra$List_Extra$notMember, suit, _p4._0);
					},
					_p4._1._0));
		} else {
			return _user$project$Haggis_Card$Wild;
		}
	});
var _user$project$Haggis_Combination$allSetsSameSuits = function (sets) {
	var _p5 = A2(_elm_lang$core$List$map, _user$project$Haggis_Combination$collectSuits, sets);
	if (_p5.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(_p5._0),
			_p5._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$allSetsSameSize = function (sets) {
	var _p6 = sets;
	if (_p6.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			function (s) {
				return _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$List$length(s),
					_elm_lang$core$List$length(_p6._0));
			},
			_p6._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$canFormSequence = function (sets) {
	return _user$project$Haggis_Combination$allSetsSameSize(sets) && (_user$project$Haggis_Combination$allSetsSameSuits(sets) && _user$project$Haggis_Combination$allSetsConsecutive(sets));
};
var _user$project$Haggis_Combination$collectSets = function (cards) {
	return A2(
		_elm_community$elm_list_extra$List_Extra$groupWhileTransitively,
		_user$project$Haggis_Card$equal,
		A2(
			_elm_lang$core$List$sortBy,
			function (_) {
				return _.order;
			},
			cards));
};
var _user$project$Haggis_Combination$distributeOneWildCard = F2(
	function (wildcard, sets) {
		var _p7 = sets;
		if (_p7.ctor === '[]') {
			return _elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Native_List.fromArray(
					[wildcard])
				]);
		} else {
			if (_p7._1.ctor === '[]') {
				var _p8 = _p7._0;
				var one = A2(
					_elm_lang$core$Maybe$withDefault,
					wildcard,
					_elm_lang$core$List$head(_p8));
				return _elm_lang$core$Native_List.fromArray(
					[
						_p8,
						_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$core$Native_Utils.update(
							wildcard,
							{suit: one.suit, order: one.order + 1})
						])
					]);
			} else {
				var _p12 = _p7._1._0;
				var _p11 = _p7._0;
				var _p10 = _p7._1._1;
				var two = A2(
					_elm_lang$core$Maybe$withDefault,
					wildcard,
					_elm_lang$core$List$head(_p12));
				var one = A2(
					_elm_lang$core$Maybe$withDefault,
					wildcard,
					_elm_lang$core$List$head(_p11));
				if (_user$project$Haggis_Combination$allRanksConsecutive(
					_elm_lang$core$Native_List.fromArray(
						[
							_user$project$Haggis_Combination$maybe(one),
							_user$project$Haggis_Combination$maybe(two)
						]))) {
					if (_elm_lang$core$Native_Utils.eq(
						_elm_lang$core$List$length(_p11),
						_elm_lang$core$List$length(_p12))) {
						var _p9 = _p10;
						if (_p9.ctor === '[]') {
							return _elm_lang$core$Native_List.fromArray(
								[
									_p11,
									_p12,
									_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$core$Native_Utils.update(
										wildcard,
										{suit: two.suit, order: two.order + 1})
									])
								]);
						} else {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Native_List.fromArray(
									[_p11, _p12]),
								A2(_user$project$Haggis_Combination$distributeOneWildCard, wildcard, _p10));
						}
					} else {
						if (_elm_lang$core$Native_Utils.cmp(
							_elm_lang$core$List$length(_p11),
							_elm_lang$core$List$length(_p12)) < 0) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$core$List$append,
										_p11,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$core$Native_Utils.update(
												wildcard,
												{
													suit: A2(_user$project$Haggis_Combination$missingSuit, _p11, _p12),
													order: one.order
												})
											])),
										_p12
									]),
								_p10);
						} else {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Native_List.fromArray(
									[
										_p11,
										A2(
										_elm_lang$core$List$append,
										_p12,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$core$Native_Utils.update(
												wildcard,
												{
													suit: A2(_user$project$Haggis_Combination$missingSuit, _p11, _p12),
													order: two.order
												})
											]))
									]),
								_p10);
						}
					}
				} else {
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Native_List.fromArray(
							[
								_p11,
								_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$core$Native_Utils.update(
									wildcard,
									{suit: one.suit, order: one.order + 1})
								]),
								_p12
							]),
						_p10);
				}
			}
		}
	});
var _user$project$Haggis_Combination$distribute = F2(
	function (wildcards, sets) {
		var _p13 = wildcards;
		if (_p13.ctor === '[]') {
			return _elm_lang$core$Native_List.fromArray(
				[sets]);
		} else {
			if (_p13._1.ctor === '[]') {
				return _elm_lang$core$Native_List.fromArray(
					[
						A2(_user$project$Haggis_Combination$distributeOneWildCard, _p13._0, sets)
					]);
			} else {
				if (_p13._1._1.ctor === '[]') {
					return _elm_lang$core$Native_List.fromArray(
						[
							A2(
							_user$project$Haggis_Combination$distributeOneWildCard,
							_p13._1._0,
							A2(_user$project$Haggis_Combination$distributeOneWildCard, _p13._0, sets))
						]);
				} else {
					if (_p13._1._1._1.ctor === '[]') {
						return _elm_lang$core$Native_List.fromArray(
							[
								A2(
								_user$project$Haggis_Combination$distributeOneWildCard,
								_p13._1._1._0,
								A2(
									_user$project$Haggis_Combination$distributeOneWildCard,
									_p13._1._0,
									A2(_user$project$Haggis_Combination$distributeOneWildCard, _p13._0, sets)))
							]);
					} else {
						return _elm_lang$core$Native_List.fromArray(
							[sets]);
					}
				}
			}
		}
	});
var _user$project$Haggis_Combination$dropDuplicates$ = F2(
	function (existing, remaining) {
		dropDuplicates$:
		while (true) {
			var _p14 = remaining;
			if (_p14.ctor === '[]') {
				return _elm_lang$core$Native_List.fromArray(
					[]);
			} else {
				var _p16 = _p14._1;
				var _p15 = _p14._0;
				if (A2(_elm_lang$core$List$member, _p15, existing)) {
					var _v10 = existing,
						_v11 = _p16;
					existing = _v10;
					remaining = _v11;
					continue dropDuplicates$;
				} else {
					return A2(
						_elm_lang$core$List_ops['::'],
						_p15,
						A2(
							_user$project$Haggis_Combination$dropDuplicates$,
							A2(_elm_lang$core$List_ops['::'], _p15, existing),
							_p16));
				}
			}
		}
	});
var _user$project$Haggis_Combination$dropDuplicates = function (suits) {
	return A2(
		_user$project$Haggis_Combination$dropDuplicates$,
		_elm_lang$core$Native_List.fromArray(
			[]),
		suits);
};
var _user$project$Haggis_Combination$hasFourSuits = function (cards) {
	var numberOfSuits = _elm_lang$core$List$length(
		_user$project$Haggis_Combination$dropDuplicates(
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.suit;
				},
				cards)));
	return _elm_lang$core$Native_Utils.eq(numberOfSuits, 4);
};
var _user$project$Haggis_Combination$hasSameSuit = F2(
	function (card, card$) {
		return _elm_lang$core$Native_Utils.eq(card.suit, card$.suit);
	});
var _user$project$Haggis_Combination$allSameSuit = function (cards) {
	var _p17 = cards;
	if (_p17.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Combination$hasSameSuit(_p17._0),
			_p17._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$allSameRank = function (cards) {
	var _p18 = cards;
	if (_p18.ctor === '[]') {
		return false;
	} else {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Card$equal(_p18._0),
			_p18._1);
	}
};
var _user$project$Haggis_Combination$Bomb = {ctor: 'Bomb'};
var _user$project$Haggis_Combination$Sequence = {ctor: 'Sequence'};
var _user$project$Haggis_Combination$Set = {ctor: 'Set'};
var _user$project$Haggis_Combination$EightOfAKind = {ctor: 'EightOfAKind'};
var _user$project$Haggis_Combination$SevenOfAKind = {ctor: 'SevenOfAKind'};
var _user$project$Haggis_Combination$SixOfAKind = {ctor: 'SixOfAKind'};
var _user$project$Haggis_Combination$FiveOfAKind = {ctor: 'FiveOfAKind'};
var _user$project$Haggis_Combination$FourOfAKind = {ctor: 'FourOfAKind'};
var _user$project$Haggis_Combination$Triple = {ctor: 'Triple'};
var _user$project$Haggis_Combination$Pair = {ctor: 'Pair'};
var _user$project$Haggis_Combination$Single = {ctor: 'Single'};
var _user$project$Haggis_Combination$makeSet = function (cards) {
	var _p19 = _elm_lang$core$List$length(cards);
	switch (_p19) {
		case 1:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single);
		case 2:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Pair);
		case 3:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Triple);
		case 4:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$FourOfAKind);
		case 5:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$FiveOfAKind);
		case 6:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$SixOfAKind);
		case 7:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$SevenOfAKind);
		case 8:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$EightOfAKind);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Haggis_Combination$set = function (cards) {
	var _p20 = A2(_elm_lang$core$List$partition, _user$project$Haggis_Card$isSpotCard, cards);
	var spotcards = _p20._0;
	var wildcards = _p20._1;
	return _user$project$Haggis_Combination$allSameRank(spotcards) ? _user$project$Haggis_Combination$makeSet(cards) : ((_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(wildcards),
		1) && _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(cards),
		1)) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single) : _elm_lang$core$Maybe$Nothing);
};
var _user$project$Haggis_Combination$RunOfEightOfAKinds = {ctor: 'RunOfEightOfAKinds'};
var _user$project$Haggis_Combination$RunOfSevenOfAKinds = {ctor: 'RunOfSevenOfAKinds'};
var _user$project$Haggis_Combination$RunOfSixOfAKinds = {ctor: 'RunOfSixOfAKinds'};
var _user$project$Haggis_Combination$RunOfFiveOfAKinds = {ctor: 'RunOfFiveOfAKinds'};
var _user$project$Haggis_Combination$RunOfFourOfAKinds = {ctor: 'RunOfFourOfAKinds'};
var _user$project$Haggis_Combination$RunOfTriples = {ctor: 'RunOfTriples'};
var _user$project$Haggis_Combination$RunOfPairs = {ctor: 'RunOfPairs'};
var _user$project$Haggis_Combination$RunOfSingles = {ctor: 'RunOfSingles'};
var _user$project$Haggis_Combination$makeSequence = function (sets) {
	var _p21 = sets;
	if (_p21.ctor === '::') {
		var _p22 = _elm_lang$core$List$length(_p21._0);
		switch (_p22) {
			case 1:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSingles);
			case 2:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfPairs);
			case 3:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfTriples);
			case 4:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfFourOfAKinds);
			case 5:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfFiveOfAKinds);
			case 6:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSixOfAKinds);
			case 7:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSevenOfAKinds);
			case 8:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfEightOfAKinds);
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Haggis_Combination$tryToFormSequence = function (maybeSequence) {
	return _user$project$Haggis_Combination$canFormSequence(maybeSequence) ? _user$project$Haggis_Combination$makeSequence(maybeSequence) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis_Combination$sequence = function (cards) {
	var _p23 = A2(_elm_lang$core$List$partition, _user$project$Haggis_Card$isSpotCard, cards);
	var spotcards = _p23._0;
	var wildcards = _p23._1;
	var maybeSequences = A2(
		_user$project$Haggis_Combination$distribute,
		wildcards,
		_user$project$Haggis_Combination$collectSets(spotcards));
	return (_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(spotcards),
		0) || (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(cards),
		3) < 0)) ? _elm_lang$core$Native_List.fromArray(
		[_elm_lang$core$Maybe$Nothing]) : A2(_elm_lang$core$List$map, _user$project$Haggis_Combination$tryToFormSequence, maybeSequences);
};
var _user$project$Haggis_Combination$Suited = {ctor: 'Suited'};
var _user$project$Haggis_Combination$JQK = {ctor: 'JQK'};
var _user$project$Haggis_Combination$QK = {ctor: 'QK'};
var _user$project$Haggis_Combination$JK = {ctor: 'JK'};
var _user$project$Haggis_Combination$JQ = {ctor: 'JQ'};
var _user$project$Haggis_Combination$Rainbow = {ctor: 'Rainbow'};
var _user$project$Haggis_Combination$bomb = function (cards) {
	var ranks = A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.rank;
		},
		A2(
			_elm_lang$core$List$sortBy,
			function (_) {
				return _.order;
			},
			cards));
	var _p24 = ranks;
	_v17_5:
	do {
		if ((_p24.ctor === '::') && (_p24._1.ctor === '::')) {
			if (_p24._1._1.ctor === '[]') {
				switch (_p24._0.ctor) {
					case 'Jack':
						switch (_p24._1._0.ctor) {
							case 'Queen':
								return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQ);
							case 'King':
								return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JK);
							default:
								break _v17_5;
						}
					case 'Queen':
						if (_p24._1._0.ctor === 'King') {
							return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$QK);
						} else {
							break _v17_5;
						}
					default:
						break _v17_5;
				}
			} else {
				if (_p24._1._1._1.ctor === '[]') {
					if (((_p24._0.ctor === 'Jack') && (_p24._1._0.ctor === 'Queen')) && (_p24._1._1._0.ctor === 'King')) {
						return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQK);
					} else {
						break _v17_5;
					}
				} else {
					if (((((_p24._0.ctor === 'Three') && (_p24._1._0.ctor === 'Five')) && (_p24._1._1._0.ctor === 'Seven')) && (_p24._1._1._1._0.ctor === 'Nine')) && (_p24._1._1._1._1.ctor === '[]')) {
						return _user$project$Haggis_Combination$allSameSuit(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Suited) : (_user$project$Haggis_Combination$hasFourSuits(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Rainbow) : _elm_lang$core$Maybe$Nothing);
					} else {
						break _v17_5;
					}
				}
			}
		} else {
			break _v17_5;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};

var _user$project$Haggis$rank = function (c) {
	var _p0 = c.rank;
	switch (_p0.ctor) {
		case 'Two':
			return 2;
		case 'Three':
			return 3;
		case 'Four':
			return 4;
		case 'Five':
			return 5;
		case 'Six':
			return 6;
		case 'Seven':
			return 7;
		case 'Eight':
			return 8;
		case 'Nine':
			return 9;
		case 'Ten':
			return 10;
		case 'Jack':
			return 11;
		case 'Queen':
			return 12;
		default:
			return 13;
	}
};
var _user$project$Haggis$eq = F2(
	function (c1, c2) {
		return _elm_lang$core$Native_Utils.eq(
			_user$project$Haggis$rank(c1),
			_user$project$Haggis$rank(c2));
	});
var _user$project$Haggis$allSameRank = function (cards) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (c1, c2) {
				return A2(c1, _user$project$Haggis$eq, c2);
			}),
		false,
		cards);
};
var _user$project$Haggis$isSetOf = F2(
	function (n, cards) {
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(cards),
			n) && _user$project$Haggis$allSameRank(cards);
	});
var _user$project$Haggis$Card = F3(
	function (a, b, c) {
		return {suit: a, rank: b, points: c};
	});
var _user$project$Haggis$List = function (a) {
	return {ctor: 'List', _0: a};
};
var _user$project$Haggis$Wild = {ctor: 'Wild'};
var _user$project$Haggis$Blue = {ctor: 'Blue'};
var _user$project$Haggis$Green = {ctor: 'Green'};
var _user$project$Haggis$Yellow = {ctor: 'Yellow'};
var _user$project$Haggis$Orange = {ctor: 'Orange'};
var _user$project$Haggis$Red = {ctor: 'Red'};
var _user$project$Haggis$King = {ctor: 'King'};
var _user$project$Haggis$Queen = {ctor: 'Queen'};
var _user$project$Haggis$Jack = {ctor: 'Jack'};
var _user$project$Haggis$Ten = {ctor: 'Ten'};
var _user$project$Haggis$Nine = {ctor: 'Nine'};
var _user$project$Haggis$Eight = {ctor: 'Eight'};
var _user$project$Haggis$Seven = {ctor: 'Seven'};
var _user$project$Haggis$Six = {ctor: 'Six'};
var _user$project$Haggis$Five = {ctor: 'Five'};
var _user$project$Haggis$Four = {ctor: 'Four'};
var _user$project$Haggis$Three = {ctor: 'Three'};
var _user$project$Haggis$Two = {ctor: 'Two'};
var _user$project$Haggis$Bomb = {ctor: 'Bomb'};
var _user$project$Haggis$Sequence = {ctor: 'Sequence'};
var _user$project$Haggis$Set = {ctor: 'Set'};
var _user$project$Haggis$Octuple = {ctor: 'Octuple'};
var _user$project$Haggis$octuple = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 8, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Octuple) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Septuple = {ctor: 'Septuple'};
var _user$project$Haggis$septuple = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 7, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Septuple) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Sextuple = {ctor: 'Sextuple'};
var _user$project$Haggis$sextuple = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 6, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Sextuple) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Quintuple = {ctor: 'Quintuple'};
var _user$project$Haggis$quintuple = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 5, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Quintuple) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Quadruple = {ctor: 'Quadruple'};
var _user$project$Haggis$quadruple = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 4, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Quadruple) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Triple = {ctor: 'Triple'};
var _user$project$Haggis$triple = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 3, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Triple) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Double = {ctor: 'Double'};
var _user$project$Haggis$double = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 2, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Double) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Single = {ctor: 'Single'};
var _user$project$Haggis$single = function (cards) {
	return A2(_user$project$Haggis$isSetOf, 1, cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis$Single) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis$Ordered = function (a) {
	return {ctor: 'Ordered', _0: a};
};
var _user$project$Haggis$Suited = {ctor: 'Suited'};
var _user$project$Haggis$JQK = {ctor: 'JQK'};
var _user$project$Haggis$QK = {ctor: 'QK'};
var _user$project$Haggis$JK = {ctor: 'JK'};
var _user$project$Haggis$JQ = {ctor: 'JQ'};
var _user$project$Haggis$Rainbow = {ctor: 'Rainbow'};

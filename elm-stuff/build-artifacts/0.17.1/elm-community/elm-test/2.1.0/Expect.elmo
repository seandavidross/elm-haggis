var _elm_community$elm_test$Expect$reportFailure = F3(
	function (comparison, expected, actual) {
		return A2(
			_elm_lang$core$String$join,
			'\n',
			_elm_lang$core$Native_List.fromArray(
				[
					actual,
					'╷',
					A2(_elm_lang$core$Basics_ops['++'], '│ ', comparison),
					'╵',
					expected
				]));
	});
var _elm_community$elm_test$Expect$onFail = F2(
	function (str, expectation) {
		var _p0 = expectation;
		if (_p0.ctor === 'Pass') {
			return expectation;
		} else {
			return A2(_elm_community$elm_test$Test_Expectation$Fail, _p0._0, str);
		}
	});
var _elm_community$elm_test$Expect$getFailure = function (expectation) {
	var _p1 = expectation;
	if (_p1.ctor === 'Pass') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(
			{given: _p1._0, message: _p1._1});
	}
};
var _elm_community$elm_test$Expect$fail = _elm_community$elm_test$Test_Expectation$Fail('');
var _elm_community$elm_test$Expect$pass = _elm_community$elm_test$Test_Expectation$Pass;
var _elm_community$elm_test$Expect$compareWith = F4(
	function (label, compare, expected, actual) {
		return A2(compare, actual, expected) ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Expect$fail(
			A3(
				_elm_community$elm_test$Expect$reportFailure,
				label,
				_elm_lang$core$Basics$toString(expected),
				_elm_lang$core$Basics$toString(actual)));
	});
var _elm_community$elm_test$Expect$false = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$fail(message) : _elm_community$elm_test$Expect$pass;
	});
var _elm_community$elm_test$Expect$true = F2(
	function (message, bool) {
		return bool ? _elm_community$elm_test$Expect$pass : _elm_community$elm_test$Expect$fail(message);
	});
var _elm_community$elm_test$Expect$atLeast = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atLeast',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > -1;
		}));
var _elm_community$elm_test$Expect$greaterThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.greaterThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) > 0;
		}));
var _elm_community$elm_test$Expect$atMost = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.atMost',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 1;
		}));
var _elm_community$elm_test$Expect$lessThan = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.lessThan',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.cmp(x, y) < 0;
		}));
var _elm_community$elm_test$Expect$notEqual = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.notEqual',
	F2(
		function (x, y) {
			return !_elm_lang$core$Native_Utils.eq(x, y);
		}));
var _elm_community$elm_test$Expect$equal = A2(
	_elm_community$elm_test$Expect$compareWith,
	'Expect.equal',
	F2(
		function (x, y) {
			return _elm_lang$core$Native_Utils.eq(x, y);
		}));

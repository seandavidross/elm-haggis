var _user$project$Tests$king = {suit: _user$project$Haggis_Card$Wild, rank: _user$project$Haggis_Card$King, order: 13, points: 5};
var _user$project$Tests$queen = {suit: _user$project$Haggis_Card$Wild, rank: _user$project$Haggis_Card$Queen, order: 12, points: 3};
var _user$project$Tests$jack = {suit: _user$project$Haggis_Card$Wild, rank: _user$project$Haggis_Card$Jack, order: 11, points: 2};
var _user$project$Tests$greenTen = {suit: _user$project$Haggis_Card$Green, rank: _user$project$Haggis_Card$Ten, order: 10, points: 0};
var _user$project$Tests$blueTen = {suit: _user$project$Haggis_Card$Blue, rank: _user$project$Haggis_Card$Ten, order: 10, points: 0};
var _user$project$Tests$yellowNine = {suit: _user$project$Haggis_Card$Yellow, rank: _user$project$Haggis_Card$Nine, order: 9, points: 1};
var _user$project$Tests$redNine = {suit: _user$project$Haggis_Card$Red, rank: _user$project$Haggis_Card$Nine, order: 9, points: 1};
var _user$project$Tests$orangeSeven = {suit: _user$project$Haggis_Card$Orange, rank: _user$project$Haggis_Card$Seven, order: 7, points: 1};
var _user$project$Tests$redSeven = {suit: _user$project$Haggis_Card$Red, rank: _user$project$Haggis_Card$Seven, order: 7, points: 1};
var _user$project$Tests$greenFive = {suit: _user$project$Haggis_Card$Green, rank: _user$project$Haggis_Card$Five, order: 5, points: 1};
var _user$project$Tests$redFive = {suit: _user$project$Haggis_Card$Red, rank: _user$project$Haggis_Card$Five, order: 5, points: 1};
var _user$project$Tests$blueFour = {suit: _user$project$Haggis_Card$Blue, rank: _user$project$Haggis_Card$Four, order: 4, points: 1};
var _user$project$Tests$redThree = {suit: _user$project$Haggis_Card$Red, rank: _user$project$Haggis_Card$Three, order: 3, points: 1};
var _user$project$Tests$greenThree = {suit: _user$project$Haggis_Card$Green, rank: _user$project$Haggis_Card$Three, order: 3, points: 1};
var _user$project$Tests$blueThree = {suit: _user$project$Haggis_Card$Blue, rank: _user$project$Haggis_Card$Three, order: 3, points: 1};
var _user$project$Tests$greenTwo = {suit: _user$project$Haggis_Card$Green, rank: _user$project$Haggis_Card$Two, order: 2, points: 0};
var _user$project$Tests$blueTwo = {suit: _user$project$Haggis_Card$Blue, rank: _user$project$Haggis_Card$Two, order: 2, points: 0};
var _user$project$Tests$all = A2(
	_elm_community$elm_test$Test$describe,
	'Haggis',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$Test$describe,
			'Haggis.Card',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_community$elm_test$Test$test,
					'new card has correct suit',
					function (_p0) {
						var _p1 = _p0;
						return A2(_elm_community$elm_test$Expect$equal, _user$project$Tests$blueTwo.suit, _user$project$Haggis_Card$Blue);
					}),
					A2(
					_elm_community$elm_test$Test$test,
					'new card has correct rank',
					function (_p2) {
						var _p3 = _p2;
						return A2(_elm_community$elm_test$Expect$equal, _user$project$Tests$blueTwo.rank, _user$project$Haggis_Card$Two);
					}),
					A2(
					_elm_community$elm_test$Test$test,
					'new card has correct points',
					function (_p4) {
						var _p5 = _p4;
						return A2(_elm_community$elm_test$Expect$equal, _user$project$Tests$redSeven.points, 1);
					}),
					A2(
					_elm_community$elm_test$Test$test,
					'card with lower rank less than card with higher rank',
					function (_p6) {
						var _p7 = _p6;
						return A2(_elm_community$elm_test$Expect$lessThan, _user$project$Tests$redSeven.order, _user$project$Tests$blueTwo.order);
					}),
					A2(
					_elm_community$elm_test$Test$test,
					'two cards with the same rank are equal',
					function (_p8) {
						var _p9 = _p8;
						return A2(_elm_community$elm_test$Expect$equal, _user$project$Tests$blueTwo.order, _user$project$Tests$greenTwo.order);
					}),
					A2(
					_elm_community$elm_test$Test$test,
					'non-matching single cards do not match',
					function (_p10) {
						var _p11 = _p10;
						return A2(_elm_community$elm_test$Expect$notEqual, _user$project$Tests$blueTwo, _user$project$Tests$redSeven);
					})
				])),
			A2(
			_elm_community$elm_test$Test$describe,
			'Haggis.Combination',
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_community$elm_test$Test$describe,
					'Haggis.Combination.Set',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_community$elm_test$Test$test,
							'one card is a single',
							function (_p12) {
								var _p13 = _p12;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$redSeven])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two cards of matching rank are a pair',
							function (_p14) {
								var _p15 = _p14;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$greenTwo])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Pair));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two cards with unmatched ranks are not a combination',
							function (_p16) {
								var _p17 = _p16;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$redSeven])),
									_elm_lang$core$Maybe$Nothing);
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two matched number cards with one wild is a triple',
							function (_p18) {
								var _p19 = _p18;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$greenTwo, _user$project$Tests$jack])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Triple));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two wild cards is NOT a pair',
							function (_p20) {
								var _p21 = _p20;
								return A2(
									_elm_community$elm_test$Expect$notEqual,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$jack, _user$project$Tests$queen])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Pair));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'one wild card is a single',
							function (_p22) {
								var _p23 = _p22;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$jack])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two matched spot cards plus three wilds is a five-of-a-kind',
							function (_p24) {
								var _p25 = _p24;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$greenTwo, _user$project$Tests$jack, _user$project$Tests$queen, _user$project$Tests$king])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$FiveOfAKind));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'a pair of tens plus two wilds is a four-of-a-kind',
							function (_p26) {
								var _p27 = _p26;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$set(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTen, _user$project$Tests$greenTen, _user$project$Tests$jack, _user$project$Tests$king])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$FourOfAKind));
							})
						])),
					A2(
					_elm_community$elm_test$Test$describe,
					'Haggis.Combination.Bomb',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_community$elm_test$Test$test,
							'one wild card is not a bomb',
							function (_p28) {
								var _p29 = _p28;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$king])),
									_elm_lang$core$Maybe$Nothing);
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two wild cards is a bomb',
							function (_p30) {
								var _p31 = _p30;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$queen, _user$project$Tests$king])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$QK));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two wild cards is a bomb, order does not matter',
							function (_p32) {
								var _p33 = _p32;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$king, _user$project$Tests$jack])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JK));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'three wild cards is a bomb',
							function (_p34) {
								var _p35 = _p34;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$jack, _user$project$Tests$queen, _user$project$Tests$king])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQK));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'four distinct, same-suited odd cards is a bomb',
							function (_p36) {
								var _p37 = _p36;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$redThree, _user$project$Tests$redFive, _user$project$Tests$redSeven, _user$project$Tests$redNine])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Suited));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'A suited bomb is a suited bomb regardless of card order',
							function (_p38) {
								var _p39 = _p38;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$redFive, _user$project$Tests$redNine, _user$project$Tests$redThree, _user$project$Tests$redSeven])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Suited));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'four distinct odd cards, with distinct suits, is a bomb',
							function (_p40) {
								var _p41 = _p40;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueThree, _user$project$Tests$greenFive, _user$project$Tests$redSeven, _user$project$Tests$yellowNine])),
									_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Rainbow));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'four distinct odd cards, with 2-3 suits, is a not bomb',
							function (_p42) {
								var _p43 = _p42;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$bomb(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueThree, _user$project$Tests$redFive, _user$project$Tests$redSeven, _user$project$Tests$yellowNine])),
									_elm_lang$core$Maybe$Nothing);
							})
						])),
					A2(
					_elm_community$elm_test$Test$describe,
					'Haggis.Combination.Sequence',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_community$elm_test$Test$test,
							'empty set of cards is not a sequence',
							function (_p44) {
								var _p45 = _p44;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[])),
									_elm_lang$core$Native_List.fromArray(
										[_elm_lang$core$Maybe$Nothing]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'three consecutive singles is a sequence',
							function (_p46) {
								var _p47 = _p46;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$blueThree, _user$project$Tests$blueFour])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSingles)
										]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'three nonconsecutive singles is not a sequence',
							function (_p48) {
								var _p49 = _p48;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$blueThree, _user$project$Tests$redThree])),
									_elm_lang$core$Native_List.fromArray(
										[_elm_lang$core$Maybe$Nothing]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two consecutive singles is not a sequence',
							function (_p50) {
								var _p51 = _p50;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$blueThree])),
									_elm_lang$core$Native_List.fromArray(
										[_elm_lang$core$Maybe$Nothing]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'three wildcards is not a sequence',
							function (_p52) {
								var _p53 = _p52;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$jack, _user$project$Tests$queen, _user$project$Tests$king])),
									_elm_lang$core$Native_List.fromArray(
										[_elm_lang$core$Maybe$Nothing]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two consecutive pairs is a sequence',
							function (_p54) {
								var _p55 = _p54;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$greenTwo, _user$project$Tests$blueThree, _user$project$Tests$greenThree])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfPairs)
										]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'card order should not affect sequence identification',
							function (_p56) {
								var _p57 = _p56;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$greenTwo, _user$project$Tests$blueThree, _user$project$Tests$greenThree, _user$project$Tests$blueTwo])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfPairs)
										]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'one spot card and two wildcards is a run of singles',
							function (_p58) {
								var _p59 = _p58;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$jack, _user$project$Tests$king])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSingles)
										]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'a ten and three wildcards is a run of singles',
							function (_p60) {
								var _p61 = _p60;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTen, _user$project$Tests$jack, _user$project$Tests$queen, _user$project$Tests$king])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSingles)
										]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'a ten and three wildcards distributes into a run of singles',
							function (_p62) {
								var _p63 = _p62;
								return A2(
									_elm_community$elm_test$Expect$equal,
									A2(
										_user$project$Haggis_Combination$distribute,
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$jack, _user$project$Tests$queen, _user$project$Tests$king]),
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$core$Native_List.fromArray(
												[_user$project$Tests$blueTen])
											])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$core$Native_List.fromArray(
												[_user$project$Tests$blueTen]),
												_elm_lang$core$Native_List.fromArray(
												[
													_elm_lang$core$Native_Utils.update(
													_user$project$Tests$jack,
													{suit: _user$project$Haggis_Card$Blue})
												]),
												_elm_lang$core$Native_List.fromArray(
												[
													_elm_lang$core$Native_Utils.update(
													_user$project$Tests$queen,
													{suit: _user$project$Haggis_Card$Blue})
												]),
												_elm_lang$core$Native_List.fromArray(
												[
													_elm_lang$core$Native_Utils.update(
													_user$project$Tests$king,
													{suit: _user$project$Haggis_Card$Blue})
												])
											])
										]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'one wildcard can fill a one rank gap between two singles to form a run',
							function (_p64) {
								var _p65 = _p64;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$blueTwo, _user$project$Tests$blueFour, _user$project$Tests$king])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSingles)
										]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'one wildcard CANNOT fill a 2+ rank gap between two singles to form a run',
							function (_p66) {
								var _p67 = _p66;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$greenTwo, _user$project$Tests$greenFive, _user$project$Tests$king])),
									_elm_lang$core$Native_List.fromArray(
										[_elm_lang$core$Maybe$Nothing]));
							}),
							A2(
							_elm_community$elm_test$Test$test,
							'two wildcards can fill a 2 rank gap between two singles to form a run',
							function (_p68) {
								var _p69 = _p68;
								return A2(
									_elm_community$elm_test$Expect$equal,
									_user$project$Haggis_Combination$sequence(
										_elm_lang$core$Native_List.fromArray(
											[_user$project$Tests$greenTwo, _user$project$Tests$greenFive, _user$project$Tests$king, _user$project$Tests$jack])),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSingles)
										]));
							})
						]))
				]))
		]));

var _user$project$Haggis_Combination$maybe = function (card) {
	return A2(
		_elm_lang$core$Maybe$map,
		_elm_lang$core$Basics$identity,
		_elm_lang$core$Maybe$Just(card));
};
var _user$project$Haggis_Combination$allRanksConsecutive = function (cards) {
	var _p0 = cards;
	if (_p0.ctor === '::') {
		if (_p0._1.ctor === '[]') {
			var _p1 = _p0._0;
			if (_p1.ctor === 'Just') {
				return true;
			} else {
				return false;
			}
		} else {
			var _p2 = {ctor: '_Tuple2', _0: _p0._0, _1: _p0._1._0};
			if (((_p2.ctor === '_Tuple2') && (_p2._0.ctor === 'Just')) && (_p2._1.ctor === 'Just')) {
				var _p3 = _p2._1._0;
				return (_elm_lang$core$Native_Utils.cmp(
					_user$project$Haggis_Card$rank(_p2._0._0),
					_user$project$Haggis_Card$rank(_p3) + 1) < 0) && _user$project$Haggis_Combination$allRanksConsecutive(
					A2(
						_elm_lang$core$List_ops['::'],
						_user$project$Haggis_Combination$maybe(_p3),
						_p0._1._1));
			} else {
				return false;
			}
		}
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$collectOneofEachRank = function (sets) {
	return A2(
		_elm_lang$core$List$map,
		function (s) {
			return _elm_lang$core$List$head(s);
		},
		sets);
};
var _user$project$Haggis_Combination$allSetsConsecutive = function (sets) {
	return _user$project$Haggis_Combination$allRanksConsecutive(
		_user$project$Haggis_Combination$collectOneofEachRank(sets));
};
var _user$project$Haggis_Combination$sortSuits = function (suits) {
	return A2(_elm_lang$core$List$sortWith, _user$project$Haggis_Card$compareSuits, suits);
};
var _user$project$Haggis_Combination$collectSuits = function (set) {
	return _user$project$Haggis_Combination$sortSuits(
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.suit;
			},
			set));
};
var _user$project$Haggis_Combination$collectSuitGroups = function (sets) {
	return A2(_elm_lang$core$List$map, _user$project$Haggis_Combination$collectSuits, sets);
};
var _user$project$Haggis_Combination$allSetsSameSuits = function (sets) {
	var _p4 = _user$project$Haggis_Combination$collectSuitGroups(sets);
	if (_p4.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(_p4._0),
			_p4._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$dropDuplicates$ = F2(
	function (existing, remaining) {
		dropDuplicates$:
		while (true) {
			var _p5 = remaining;
			if (_p5.ctor === '[]') {
				return _elm_lang$core$Native_List.fromArray(
					[]);
			} else {
				var _p7 = _p5._1;
				var _p6 = _p5._0;
				if (A2(_elm_lang$core$List$member, _p6, existing)) {
					var _v5 = existing,
						_v6 = _p7;
					existing = _v5;
					remaining = _v6;
					continue dropDuplicates$;
				} else {
					return A2(
						_elm_lang$core$List_ops['::'],
						_p6,
						A2(
							_user$project$Haggis_Combination$dropDuplicates$,
							A2(_elm_lang$core$List_ops['::'], _p6, existing),
							_p7));
				}
			}
		}
	});
var _user$project$Haggis_Combination$dropDuplicates = function (suits) {
	return A2(
		_user$project$Haggis_Combination$dropDuplicates$,
		_elm_lang$core$Native_List.fromArray(
			[]),
		suits);
};
var _user$project$Haggis_Combination$hasFourSuits = function (cards) {
	var numberOfSuits = _elm_lang$core$List$length(
		_user$project$Haggis_Combination$dropDuplicates(
			A2(_elm_lang$core$List$map, _user$project$Haggis_Card$suit, cards)));
	return _elm_lang$core$Native_Utils.eq(numberOfSuits, 4);
};
var _user$project$Haggis_Combination$hasSameSuit = F2(
	function (card, card$) {
		return _elm_lang$core$Native_Utils.eq(card.suit, card$.suit);
	});
var _user$project$Haggis_Combination$allSameSuit = function (cards) {
	var _p8 = cards;
	if (_p8.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Combination$hasSameSuit(_p8._0),
			_p8._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$collectRanks = function (cards) {
	return A2(
		_elm_lang$core$List$map,
		function (_) {
			return _.rank;
		},
		cards);
};
var _user$project$Haggis_Combination$sorted = function (cards) {
	return A2(_elm_lang$core$List$sortBy, _user$project$Haggis_Card$rank, cards);
};
var _user$project$Haggis_Combination$collectSets = function (cards) {
	return A2(
		_elm_community$elm_list_extra$List_Extra$groupWhile,
		_user$project$Haggis_Card$equal,
		_user$project$Haggis_Combination$sorted(cards));
};
var _user$project$Haggis_Combination$count = function (cards) {
	return _elm_lang$core$List$length(cards);
};
var _user$project$Haggis_Combination$size = _user$project$Haggis_Combination$count;
var _user$project$Haggis_Combination$allSetsSameSize = function (sets) {
	var _p9 = sets;
	if (_p9.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			function (s) {
				return _elm_lang$core$Native_Utils.eq(
					_user$project$Haggis_Combination$size(s),
					_user$project$Haggis_Combination$size(_p9._0));
			},
			_p9._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$canFormSequence = function (sets) {
	return _user$project$Haggis_Combination$allSetsSameSize(sets) && (_user$project$Haggis_Combination$allSetsSameSuits(sets) && _user$project$Haggis_Combination$allSetsConsecutive(sets));
};
var _user$project$Haggis_Combination$allSameRank = function (cards) {
	var _p10 = cards;
	if (_p10.ctor === '[]') {
		return false;
	} else {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Card$equal(_p10._0),
			_p10._1);
	}
};
var _user$project$Haggis_Combination$Bomb = {ctor: 'Bomb'};
var _user$project$Haggis_Combination$Sequence = {ctor: 'Sequence'};
var _user$project$Haggis_Combination$Set = {ctor: 'Set'};
var _user$project$Haggis_Combination$EightOfAKind = {ctor: 'EightOfAKind'};
var _user$project$Haggis_Combination$SevenOfAKind = {ctor: 'SevenOfAKind'};
var _user$project$Haggis_Combination$SixOfAKind = {ctor: 'SixOfAKind'};
var _user$project$Haggis_Combination$FiveOfAKind = {ctor: 'FiveOfAKind'};
var _user$project$Haggis_Combination$FourOfAKind = {ctor: 'FourOfAKind'};
var _user$project$Haggis_Combination$Triple = {ctor: 'Triple'};
var _user$project$Haggis_Combination$Pair = {ctor: 'Pair'};
var _user$project$Haggis_Combination$Single = {ctor: 'Single'};
var _user$project$Haggis_Combination$makeSet = function (cards) {
	var _p11 = _user$project$Haggis_Combination$count(cards);
	switch (_p11) {
		case 1:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single);
		case 2:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Pair);
		case 3:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Triple);
		case 4:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$FourOfAKind);
		case 5:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$FiveOfAKind);
		case 6:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$SixOfAKind);
		case 7:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$SevenOfAKind);
		case 8:
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$EightOfAKind);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Haggis_Combination$set = function (cards) {
	var _p12 = A2(_elm_lang$core$List$partition, _user$project$Haggis_Card$isSpotCard, cards);
	var spotCards = _p12._0;
	var wildCards = _p12._1;
	return _user$project$Haggis_Combination$allSameRank(spotCards) ? _user$project$Haggis_Combination$makeSet(cards) : ((_elm_lang$core$Native_Utils.eq(
		_user$project$Haggis_Combination$count(wildCards),
		1) && _elm_lang$core$Native_Utils.eq(
		_user$project$Haggis_Combination$count(cards),
		1)) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single) : _elm_lang$core$Maybe$Nothing);
};
var _user$project$Haggis_Combination$RunOfEightOfAKinds = {ctor: 'RunOfEightOfAKinds'};
var _user$project$Haggis_Combination$RunOfSevenOfAKinds = {ctor: 'RunOfSevenOfAKinds'};
var _user$project$Haggis_Combination$RunOfSixOfAKinds = {ctor: 'RunOfSixOfAKinds'};
var _user$project$Haggis_Combination$RunOfFiveOfAKinds = {ctor: 'RunOfFiveOfAKinds'};
var _user$project$Haggis_Combination$RunOfFourOfAKinds = {ctor: 'RunOfFourOfAKinds'};
var _user$project$Haggis_Combination$RunOfTriples = {ctor: 'RunOfTriples'};
var _user$project$Haggis_Combination$RunOfPairs = {ctor: 'RunOfPairs'};
var _user$project$Haggis_Combination$RunOfSingles = {ctor: 'RunOfSingles'};
var _user$project$Haggis_Combination$makeSequence = function (sets) {
	var _p13 = sets;
	if (_p13.ctor === '::') {
		var _p14 = _user$project$Haggis_Combination$size(_p13._0);
		switch (_p14) {
			case 1:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSingles);
			case 2:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfPairs);
			case 3:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfTriples);
			case 4:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfFourOfAKinds);
			case 5:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfFiveOfAKinds);
			case 6:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSixOfAKinds);
			case 7:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfSevenOfAKinds);
			case 8:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$RunOfEightOfAKinds);
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Haggis_Combination$sequence = function (cards) {
	var sets = _user$project$Haggis_Combination$collectSets(cards);
	return ((_elm_lang$core$Native_Utils.cmp(
		_user$project$Haggis_Combination$count(cards),
		3) > -1) && _user$project$Haggis_Combination$canFormSequence(sets)) ? _user$project$Haggis_Combination$makeSequence(sets) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis_Combination$Suited = {ctor: 'Suited'};
var _user$project$Haggis_Combination$JQK = {ctor: 'JQK'};
var _user$project$Haggis_Combination$QK = {ctor: 'QK'};
var _user$project$Haggis_Combination$JK = {ctor: 'JK'};
var _user$project$Haggis_Combination$JQ = {ctor: 'JQ'};
var _user$project$Haggis_Combination$Rainbow = {ctor: 'Rainbow'};
var _user$project$Haggis_Combination$bomb = function (cards) {
	var _p15 = _user$project$Haggis_Combination$sorted(cards);
	_v13_3:
	do {
		if ((_p15.ctor === '::') && (_p15._1.ctor === '::')) {
			if (_p15._1._1.ctor === '[]') {
				var _p16 = _user$project$Haggis_Combination$collectRanks(
					_elm_lang$core$Native_List.fromArray(
						[_p15._0, _p15._1._0]));
				_v14_3:
				do {
					if (((_p16.ctor === '::') && (_p16._1.ctor === '::')) && (_p16._1._1.ctor === '[]')) {
						switch (_p16._0.ctor) {
							case 'Jack':
								switch (_p16._1._0.ctor) {
									case 'Queen':
										return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQ);
									case 'King':
										return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JK);
									default:
										break _v14_3;
								}
							case 'Queen':
								if (_p16._1._0.ctor === 'King') {
									return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$QK);
								} else {
									break _v14_3;
								}
							default:
								break _v14_3;
						}
					} else {
						break _v14_3;
					}
				} while(false);
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p15._1._1._1.ctor === '[]') {
					var _p17 = _user$project$Haggis_Combination$collectRanks(
						_elm_lang$core$Native_List.fromArray(
							[_p15._0, _p15._1._0, _p15._1._1._0]));
					if (((((((_p17.ctor === '::') && (_p17._0.ctor === 'Jack')) && (_p17._1.ctor === '::')) && (_p17._1._0.ctor === 'Queen')) && (_p17._1._1.ctor === '::')) && (_p17._1._1._0.ctor === 'King')) && (_p17._1._1._1.ctor === '[]')) {
						return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQK);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					if (_p15._1._1._1._1.ctor === '[]') {
						var _p18 = _user$project$Haggis_Combination$collectRanks(
							_elm_lang$core$Native_List.fromArray(
								[_p15._0, _p15._1._0, _p15._1._1._0, _p15._1._1._1._0]));
						if (((((((((_p18.ctor === '::') && (_p18._0.ctor === 'Three')) && (_p18._1.ctor === '::')) && (_p18._1._0.ctor === 'Five')) && (_p18._1._1.ctor === '::')) && (_p18._1._1._0.ctor === 'Seven')) && (_p18._1._1._1.ctor === '::')) && (_p18._1._1._1._0.ctor === 'Nine')) && (_p18._1._1._1._1.ctor === '[]')) {
							return _user$project$Haggis_Combination$allSameSuit(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Suited) : (_user$project$Haggis_Combination$hasFourSuits(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Rainbow) : _elm_lang$core$Maybe$Nothing);
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						break _v13_3;
					}
				}
			}
		} else {
			break _v13_3;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};

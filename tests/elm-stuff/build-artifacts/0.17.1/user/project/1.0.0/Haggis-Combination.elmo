var _user$project$Haggis_Combination$sizeOfSet = function (set) {
	return _elm_lang$core$List$length(set);
};
var _user$project$Haggis_Combination$allRanksConsecutive = function (cards) {
	var _p0 = cards;
	if (_p0.ctor === '[]') {
		return false;
	} else {
		if (_p0._1.ctor === '[]') {
			var _p1 = _p0._0;
			if (_p1.ctor === 'Just') {
				return true;
			} else {
				return false;
			}
		} else {
			var _p2 = {ctor: '_Tuple2', _0: _p0._0, _1: _p0._1._0};
			if (((_p2.ctor === '_Tuple2') && (_p2._0.ctor === 'Just')) && (_p2._1.ctor === 'Just')) {
				var _p3 = _p2._1._0;
				return (_elm_lang$core$Native_Utils.cmp(
					_user$project$Haggis_Card$rank(_p2._0._0),
					_user$project$Haggis_Card$rank(_p3) + 1) < 0) && _user$project$Haggis_Combination$allRanksConsecutive(
					A2(
						_elm_lang$core$List_ops['::'],
						A2(
							_elm_lang$core$Maybe$map,
							_elm_lang$core$Basics$identity,
							_elm_lang$core$Maybe$Just(_p3)),
						_p0._1._1));
			} else {
				return false;
			}
		}
	}
};
var _user$project$Haggis_Combination$allSetsConsecutive = function (sets) {
	var ranks = A2(
		_elm_lang$core$List$map,
		function (s) {
			return _elm_lang$core$List$head(s);
		},
		sets);
	return _user$project$Haggis_Combination$allRanksConsecutive(ranks);
};
var _user$project$Haggis_Combination$compareSuits = F2(
	function (s, s$) {
		var _p4 = s;
		switch (_p4.ctor) {
			case 'Red':
				var _p5 = s$;
				if (_p5.ctor === 'Red') {
					return _elm_lang$core$Basics$EQ;
				} else {
					return _elm_lang$core$Basics$LT;
				}
			case 'Orange':
				var _p6 = s$;
				switch (_p6.ctor) {
					case 'Red':
						return _elm_lang$core$Basics$GT;
					case 'Orange':
						return _elm_lang$core$Basics$EQ;
					default:
						return _elm_lang$core$Basics$LT;
				}
			case 'Yellow':
				var _p7 = s$;
				switch (_p7.ctor) {
					case 'Red':
						return _elm_lang$core$Basics$GT;
					case 'Orange':
						return _elm_lang$core$Basics$GT;
					case 'Yellow':
						return _elm_lang$core$Basics$EQ;
					default:
						return _elm_lang$core$Basics$LT;
				}
			case 'Green':
				var _p8 = s$;
				switch (_p8.ctor) {
					case 'Wild':
						return _elm_lang$core$Basics$LT;
					case 'Blue':
						return _elm_lang$core$Basics$LT;
					case 'Green':
						return _elm_lang$core$Basics$EQ;
					default:
						return _elm_lang$core$Basics$GT;
				}
			case 'Blue':
				var _p9 = s$;
				switch (_p9.ctor) {
					case 'Wild':
						return _elm_lang$core$Basics$LT;
					case 'Blue':
						return _elm_lang$core$Basics$EQ;
					default:
						return _elm_lang$core$Basics$GT;
				}
			default:
				return _elm_lang$core$Basics$GT;
		}
	});
var _user$project$Haggis_Combination$sortSuits = function (suits) {
	return A2(_elm_lang$core$List$sortWith, _user$project$Haggis_Combination$compareSuits, suits);
};
var _user$project$Haggis_Combination$collectSuits = function (set) {
	return _user$project$Haggis_Combination$sortSuits(
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.suit;
			},
			set));
};
var _user$project$Haggis_Combination$allSetsSameSuits = function (sets) {
	var suitGroups = A2(_elm_lang$core$List$map, _user$project$Haggis_Combination$collectSuits, sets);
	var _p10 = suitGroups;
	if (_p10.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(_p10._0),
			_p10._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$allSetsSameSize = function (sets) {
	var _p11 = sets;
	if (_p11.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			function (s) {
				return _elm_lang$core$Native_Utils.eq(
					_elm_lang$core$List$length(s),
					_user$project$Haggis_Combination$sizeOfSet(_p11._0));
			},
			_p11._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$canMakeSequence = function (sets) {
	return _user$project$Haggis_Combination$allSetsSameSize(sets) && (_user$project$Haggis_Combination$allSetsSameSuits(sets) && _user$project$Haggis_Combination$allSetsConsecutive(sets));
};
var _user$project$Haggis_Combination$dropDuplicates$ = F2(
	function (existing, remaining) {
		dropDuplicates$:
		while (true) {
			var _p12 = remaining;
			if (_p12.ctor === '[]') {
				return _elm_lang$core$Native_List.fromArray(
					[]);
			} else {
				var _p14 = _p12._1;
				var _p13 = _p12._0;
				if (A2(_elm_lang$core$List$member, _p13, existing)) {
					var _v12 = existing,
						_v13 = _p14;
					existing = _v12;
					remaining = _v13;
					continue dropDuplicates$;
				} else {
					return A2(
						_elm_lang$core$List_ops['::'],
						_p13,
						A2(
							_user$project$Haggis_Combination$dropDuplicates$,
							A2(_elm_lang$core$List_ops['::'], _p13, existing),
							_p14));
				}
			}
		}
	});
var _user$project$Haggis_Combination$dropDuplicates = function (suits) {
	return A2(
		_user$project$Haggis_Combination$dropDuplicates$,
		_elm_lang$core$Native_List.fromArray(
			[]),
		suits);
};
var _user$project$Haggis_Combination$hasFourSuits = function (cards) {
	var numberOfSuits = _elm_lang$core$List$length(
		_user$project$Haggis_Combination$dropDuplicates(
			A2(_elm_lang$core$List$map, _user$project$Haggis_Card$suit, cards)));
	return _elm_lang$core$Native_Utils.eq(numberOfSuits, 4);
};
var _user$project$Haggis_Combination$hasSameSuit = F2(
	function (card, card$) {
		return _elm_lang$core$Native_Utils.eq(card.suit, card$.suit);
	});
var _user$project$Haggis_Combination$allSameSuit = function (cards) {
	var _p15 = cards;
	if (_p15.ctor === '[]') {
		return false;
	} else {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Combination$hasSameSuit(_p15._0),
			_p15._1);
	}
};
var _user$project$Haggis_Combination$sorted = function (cards) {
	return A2(_elm_lang$core$List$sortBy, _user$project$Haggis_Card$rank, cards);
};
var _user$project$Haggis_Combination$isSoloWildCard = function (wildCards) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(wildCards),
		1);
};
var _user$project$Haggis_Combination$count = function (cards) {
	return _elm_lang$core$List$length(cards);
};
var _user$project$Haggis_Combination$allSameRank = function (cards) {
	var _p16 = cards;
	if (_p16.ctor === '[]') {
		return false;
	} else {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Card$equal(_p16._0),
			_p16._1);
	}
};
var _user$project$Haggis_Combination$Bomb = {ctor: 'Bomb'};
var _user$project$Haggis_Combination$Sequence = {ctor: 'Sequence'};
var _user$project$Haggis_Combination$Set = {ctor: 'Set'};
var _user$project$Haggis_Combination$Octuple = {ctor: 'Octuple'};
var _user$project$Haggis_Combination$Septuple = {ctor: 'Septuple'};
var _user$project$Haggis_Combination$Sextuple = {ctor: 'Sextuple'};
var _user$project$Haggis_Combination$Quintuple = {ctor: 'Quintuple'};
var _user$project$Haggis_Combination$Quadruple = {ctor: 'Quadruple'};
var _user$project$Haggis_Combination$Triple = {ctor: 'Triple'};
var _user$project$Haggis_Combination$Double = {ctor: 'Double'};
var _user$project$Haggis_Combination$Single = {ctor: 'Single'};
var _user$project$Haggis_Combination$set = function (cards) {
	var _p17 = A2(_elm_lang$core$List$partition, _user$project$Haggis_Card$isSpotCard, cards);
	var spotCards = _p17._0;
	var wildCards = _p17._1;
	if (_user$project$Haggis_Combination$allSameRank(spotCards)) {
		var _p18 = _user$project$Haggis_Combination$count(cards);
		switch (_p18) {
			case 1:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single);
			case 2:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Double);
			case 3:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Triple);
			case 4:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Quadruple);
			case 5:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Quintuple);
			case 6:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Sextuple);
			case 7:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Septuple);
			case 8:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Octuple);
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		if (_user$project$Haggis_Combination$isSoloWildCard(wildCards) && _elm_lang$core$Native_Utils.eq(
			_user$project$Haggis_Combination$count(cards),
			1)) {
			return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Single);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}
};
var _user$project$Haggis_Combination$OctupleRun = {ctor: 'OctupleRun'};
var _user$project$Haggis_Combination$SeptupleRun = {ctor: 'SeptupleRun'};
var _user$project$Haggis_Combination$SextupleRun = {ctor: 'SextupleRun'};
var _user$project$Haggis_Combination$QuintupleRun = {ctor: 'QuintupleRun'};
var _user$project$Haggis_Combination$QuadrupleRun = {ctor: 'QuadrupleRun'};
var _user$project$Haggis_Combination$TripleRun = {ctor: 'TripleRun'};
var _user$project$Haggis_Combination$DoubleRun = {ctor: 'DoubleRun'};
var _user$project$Haggis_Combination$SingleRun = {ctor: 'SingleRun'};
var _user$project$Haggis_Combination$makeSequence = function (sets) {
	var _p19 = sets;
	if (_p19.ctor === '::') {
		var _p20 = _user$project$Haggis_Combination$sizeOfSet(_p19._0);
		switch (_p20) {
			case 1:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$SingleRun);
			case 2:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$DoubleRun);
			case 3:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$TripleRun);
			case 4:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$QuadrupleRun);
			case 5:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$QuintupleRun);
			case 6:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$SextupleRun);
			case 7:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$SeptupleRun);
			case 8:
				return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$OctupleRun);
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Haggis_Combination$sequence = function (cards) {
	var sets = A2(
		_elm_community$elm_list_extra$List_Extra$groupWhile,
		_user$project$Haggis_Card$equal,
		_user$project$Haggis_Combination$sorted(cards));
	return ((_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$List$length(cards),
		3) > -1) && _user$project$Haggis_Combination$canMakeSequence(sets)) ? _user$project$Haggis_Combination$makeSequence(sets) : _elm_lang$core$Maybe$Nothing;
};
var _user$project$Haggis_Combination$Suited = {ctor: 'Suited'};
var _user$project$Haggis_Combination$JQK = {ctor: 'JQK'};
var _user$project$Haggis_Combination$QK = {ctor: 'QK'};
var _user$project$Haggis_Combination$JK = {ctor: 'JK'};
var _user$project$Haggis_Combination$JQ = {ctor: 'JQ'};
var _user$project$Haggis_Combination$Rainbow = {ctor: 'Rainbow'};
var _user$project$Haggis_Combination$bomb = function (cards) {
	var _p21 = _user$project$Haggis_Combination$sorted(cards);
	_v19_3:
	do {
		if ((_p21.ctor === '::') && (_p21._1.ctor === '::')) {
			if (_p21._1._1.ctor === '[]') {
				var _p22 = {ctor: '_Tuple2', _0: _p21._0.rank, _1: _p21._1._0.rank};
				_v20_3:
				do {
					if (_p22.ctor === '_Tuple2') {
						switch (_p22._0.ctor) {
							case 'Jack':
								switch (_p22._1.ctor) {
									case 'Queen':
										return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQ);
									case 'King':
										return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JK);
									default:
										break _v20_3;
								}
							case 'Queen':
								if (_p22._1.ctor === 'King') {
									return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$QK);
								} else {
									break _v20_3;
								}
							default:
								break _v20_3;
						}
					} else {
						break _v20_3;
					}
				} while(false);
				return _elm_lang$core$Maybe$Nothing;
			} else {
				if (_p21._1._1._1.ctor === '[]') {
					var _p23 = {ctor: '_Tuple3', _0: _p21._0.rank, _1: _p21._1._0.rank, _2: _p21._1._1._0.rank};
					if ((((_p23.ctor === '_Tuple3') && (_p23._0.ctor === 'Jack')) && (_p23._1.ctor === 'Queen')) && (_p23._2.ctor === 'King')) {
						return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQK);
					} else {
						return _elm_lang$core$Maybe$Nothing;
					}
				} else {
					if (_p21._1._1._1._1.ctor === '[]') {
						var _p24 = A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.rank;
							},
							_elm_lang$core$Native_List.fromArray(
								[_p21._0, _p21._1._0, _p21._1._1._0, _p21._1._1._1._0]));
						if (((((((((_p24.ctor === '::') && (_p24._0.ctor === 'Three')) && (_p24._1.ctor === '::')) && (_p24._1._0.ctor === 'Five')) && (_p24._1._1.ctor === '::')) && (_p24._1._1._0.ctor === 'Seven')) && (_p24._1._1._1.ctor === '::')) && (_p24._1._1._1._0.ctor === 'Nine')) && (_p24._1._1._1._1.ctor === '[]')) {
							return _user$project$Haggis_Combination$allSameSuit(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Suited) : (_user$project$Haggis_Combination$hasFourSuits(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Rainbow) : _elm_lang$core$Maybe$Nothing);
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						break _v19_3;
					}
				}
			}
		} else {
			break _v19_3;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};

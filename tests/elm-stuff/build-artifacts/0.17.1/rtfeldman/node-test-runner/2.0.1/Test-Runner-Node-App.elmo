var _rtfeldman$node_test_runner$Test_Runner_Node_App$intFromString = A2(_elm_lang$core$Json_Decode$customDecoder, _elm_lang$core$Json_Decode$string, _elm_lang$core$String$toInt);
var _rtfeldman$node_test_runner$Test_Runner_Node_App$toThunksHelp = F2(
	function (labels, runner) {
		toThunksHelp:
		while (true) {
			var _p0 = runner;
			switch (_p0.ctor) {
				case 'Runnable':
					return _elm_lang$core$Native_List.fromArray(
						[
							function (_p1) {
							var _p2 = _p1;
							return {
								ctor: '_Tuple2',
								_0: labels,
								_1: _elm_community$elm_test$Test_Runner$run(_p0._0)
							};
						}
						]);
				case 'Labeled':
					var _v2 = A2(_elm_lang$core$List_ops['::'], _p0._0, labels),
						_v3 = _p0._1;
					labels = _v2;
					runner = _v3;
					continue toThunksHelp;
				default:
					return A2(
						_elm_lang$core$List$concatMap,
						_rtfeldman$node_test_runner$Test_Runner_Node_App$toThunksHelp(labels),
						_p0._0);
			}
		}
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$toThunks = _rtfeldman$node_test_runner$Test_Runner_Node_App$toThunksHelp(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _rtfeldman$node_test_runner$Test_Runner_Node_App$fromNever = function (a) {
	fromNever:
	while (true) {
		var _v4 = a;
		a = _v4;
		continue fromNever;
	}
};
var _rtfeldman$node_test_runner$Test_Runner_Node_App$timeToNumericSeed = function (time) {
	return _elm_lang$core$Basics$fst(
		A2(
			_mgold$elm_random_pcg$Random_Pcg$step,
			A2(_mgold$elm_random_pcg$Random_Pcg$int, 100, _mgold$elm_random_pcg$Random_Pcg$maxInt),
			_mgold$elm_random_pcg$Random_Pcg$initialSeed(
				_elm_lang$core$Basics$floor(time))));
};
var _rtfeldman$node_test_runner$Test_Runner_Node_App$InitArgs = F3(
	function (a, b, c) {
		return {initialSeed: a, startTime: b, thunks: c};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$RunnerOptions = F2(
	function (a, b) {
		return {seed: a, runs: b};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$AppOptions = F3(
	function (a, b, c) {
		return {init: a, update: b, subscriptions: c};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$SubMsg = function (a) {
	return {ctor: 'SubMsg', _0: a};
};
var _rtfeldman$node_test_runner$Test_Runner_Node_App$subscriptions = F2(
	function (subs, model) {
		var _p3 = model;
		if (_p3.ctor === 'Uninitialized') {
			return _elm_lang$core$Platform_Sub$none;
		} else {
			return A2(
				_elm_lang$core$Platform_Sub$map,
				_rtfeldman$node_test_runner$Test_Runner_Node_App$SubMsg,
				subs(_p3._1));
		}
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$Init = function (a) {
	return {ctor: 'Init', _0: a};
};
var _rtfeldman$node_test_runner$Test_Runner_Node_App$Uninitialized = F2(
	function (a, b) {
		return {ctor: 'Uninitialized', _0: a, _1: b};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$Initialized = F2(
	function (a, b) {
		return {ctor: 'Initialized', _0: a, _1: b};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$initOrUpdate = F2(
	function (msg, maybeModel) {
		var _p4 = maybeModel;
		if (_p4.ctor === 'Uninitialized') {
			var _p5 = msg;
			if (_p5.ctor === 'Init') {
				var _p8 = _p5._0;
				var numericSeed = function () {
					var _p6 = _p4._1.maybeNumericSeed;
					if (_p6.ctor === 'Just') {
						return _p6._0;
					} else {
						return _rtfeldman$node_test_runner$Test_Runner_Node_App$timeToNumericSeed(_p8);
					}
				}();
				var seed = _mgold$elm_random_pcg$Random_Pcg$initialSeed(numericSeed);
				var thunks = _rtfeldman$node_test_runner$Test_Runner_Node_App$toThunks(
					A3(_elm_community$elm_test$Test_Runner$fromTest, _p4._1.runs, seed, _p4._1.test));
				var _p7 = _p4._1.init(
					{initialSeed: numericSeed, startTime: _p8, thunks: thunks});
				var subModel = _p7._0;
				var subCmd = _p7._1;
				return {
					ctor: '_Tuple2',
					_0: A2(_rtfeldman$node_test_runner$Test_Runner_Node_App$Initialized, _p4._0, subModel),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _rtfeldman$node_test_runner$Test_Runner_Node_App$SubMsg, subCmd)
				};
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Test.Runner.Node.App',
					{
						start: {line: 63, column: 13},
						end: {line: 92, column: 70}
					},
					_p5)('Attempted to run a SubMsg pre-Init!');
			}
		} else {
			var _p13 = _p4._0;
			var _p10 = msg;
			if (_p10.ctor === 'SubMsg') {
				var _p11 = A2(_p13, _p10._0, _p4._1);
				var newModel = _p11._0;
				var cmd = _p11._1;
				return {
					ctor: '_Tuple2',
					_0: A2(_rtfeldman$node_test_runner$Test_Runner_Node_App$Initialized, _p13, newModel),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _rtfeldman$node_test_runner$Test_Runner_Node_App$SubMsg, cmd)
				};
			} else {
				return _elm_lang$core$Native_Utils.crashCase(
					'Test.Runner.Node.App',
					{
						start: {line: 95, column: 13},
						end: {line: 104, column: 59}
					},
					_p10)('Attempted to init twice!');
			}
		}
	});
var _rtfeldman$node_test_runner$Test_Runner_Node_App$run = F3(
	function (_p14, appOpts, test) {
		var _p15 = _p14;
		var _p21 = _p15.seed;
		var init = function (maybeInitialSeed) {
			var initialSeed = function () {
				var _p16 = {
					ctor: '_Tuple2',
					_0: A2(
						_elm_lang$core$Json_Decode$decodeValue,
						_elm_community$json_extra$Json_Decode_Extra$maybeNull(_rtfeldman$node_test_runner$Test_Runner_Node_App$intFromString),
						maybeInitialSeed),
					_1: _p21
				};
				if (_p16._0.ctor === 'Err') {
					return _elm_lang$core$Native_Utils.crashCase(
						'Test.Runner.Node.App',
						{
							start: {line: 169, column: 21},
							end: {line: 193, column: 36}
						},
						_p16)(
						A2(_elm_lang$core$Basics_ops['++'], 'Invalid --seed argument: ', _p16._0._0));
				} else {
					if (_p16._0._0.ctor === 'Just') {
						if (_p16._1.ctor === 'Just') {
							var _p19 = _p16._1._0;
							var _p18 = _p16._0._0._0;
							return _elm_lang$core$Native_Utils.eq(_p18, _p19) ? _p21 : _elm_lang$core$Native_Utils.crash(
								'Test.Runner.Node.App',
								{
									start: {line: 181, column: 33},
									end: {line: 181, column: 44}
								})(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Received both a --seed flag (',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(_p18),
										A2(
											_elm_lang$core$Basics_ops['++'],
											') and a runner option seed (',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p19),
												'). Which initial seed did you mean to use?')))));
						} else {
							return _elm_lang$core$Maybe$Just(_p16._0._0._0);
						}
					} else {
						if (_p16._1.ctor === 'Just') {
							return _p21;
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				}
			}();
			var cmd = A3(_elm_lang$core$Task$perform, _rtfeldman$node_test_runner$Test_Runner_Node_App$fromNever, _rtfeldman$node_test_runner$Test_Runner_Node_App$Init, _elm_lang$core$Time$now);
			return {
				ctor: '_Tuple2',
				_0: A2(
					_rtfeldman$node_test_runner$Test_Runner_Node_App$Uninitialized,
					appOpts.update,
					{maybeNumericSeed: initialSeed, runs: _p15.runs, test: test, init: appOpts.init}),
				_1: cmd
			};
		};
		return _elm_lang$html$Html_App$programWithFlags(
			{
				init: init,
				update: _rtfeldman$node_test_runner$Test_Runner_Node_App$initOrUpdate,
				view: function (_p20) {
					return _elm_lang$html$Html$text('This should be run in Node, not in a browser!');
				},
				subscriptions: _rtfeldman$node_test_runner$Test_Runner_Node_App$subscriptions(appOpts.subscriptions)
			});
	});

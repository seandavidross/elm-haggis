var _rtfeldman$node_test_runner$Test_Runner_Node$defaultOptions = {runs: 100, seed: _elm_lang$core$Maybe$Nothing};
var _rtfeldman$node_test_runner$Test_Runner_Node$chalkWith = F2(
	function (emit, chalks) {
		var encoded = _elm_lang$core$Json_Encode$list(
			A2(_elm_lang$core$List$map, _rtfeldman$node_test_runner$Chalk$encode, chalks));
		return emit(
			{ctor: '_Tuple2', _0: 'CHALK', _1: encoded});
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$pluralize = F3(
	function (singular, plural, count) {
		var suffix = _elm_lang$core$Native_Utils.eq(count, 1) ? singular : plural;
		return A2(
			_elm_lang$core$String$join,
			' ',
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Basics$toString(count),
					suffix
				]));
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$reportBegin = F2(
	function (emit, _p0) {
		var _p1 = _p0;
		return A2(
			_rtfeldman$node_test_runner$Test_Runner_Node$chalkWith,
			emit,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					styles: _elm_lang$core$Native_List.fromArray(
						[]),
					text: A2(
						_elm_lang$core$Basics_ops['++'],
						'\nelm-test\n--------\n\nRunning ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							A3(_rtfeldman$node_test_runner$Test_Runner_Node$pluralize, 'test', 'tests', _p1.testCount),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'. To reproduce these results, run: elm-test --seed ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p1.initialSeed),
									'\n'))))
				}
				]));
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$formatDuration = function (time) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$Basics$toString(time),
		' ms');
};
var _rtfeldman$node_test_runner$Test_Runner_Node$never = function (a) {
	never:
	while (true) {
		var _v1 = a;
		a = _v1;
		continue never;
	}
};
var _rtfeldman$node_test_runner$Test_Runner_Node$warn = F2(
	function (str, result) {
		var _p2 = _elm_lang$core$Debug$log(str);
		return result;
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$indent = function (str) {
	return A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				})('    '),
			A2(_elm_lang$core$String$split, '\n', str)));
};
var _rtfeldman$node_test_runner$Test_Runner_Node$failureToChalk = function (_p3) {
	var _p4 = _p3;
	var _p5 = _p4.given;
	var messageChalk = {
		styles: _elm_lang$core$Native_List.fromArray(
			[]),
		text: A2(
			_elm_lang$core$Basics_ops['++'],
			'\n',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_rtfeldman$node_test_runner$Test_Runner_Node$indent(_p4.message),
				'\n\n'))
	};
	return _elm_lang$core$String$isEmpty(_p5) ? _elm_lang$core$Native_List.fromArray(
		[messageChalk]) : _elm_lang$core$Native_List.fromArray(
		[
			{
			styles: _elm_lang$core$Native_List.fromArray(
				['dim']),
			text: A2(
				_elm_lang$core$Basics_ops['++'],
				'\nGiven ',
				A2(_elm_lang$core$Basics_ops['++'], _p5, '\n'))
		},
			messageChalk
		]);
};
var _rtfeldman$node_test_runner$Test_Runner_Node$labelsToChalk = A2(
	_elm_community$elm_test$Test_Runner$formatLabels,
	A2(
		_rtfeldman$node_test_runner$Chalk$withColorChar,
		_elm_lang$core$Native_Utils.chr('↓'),
		'dim'),
	A2(
		_rtfeldman$node_test_runner$Chalk$withColorChar,
		_elm_lang$core$Native_Utils.chr('✗'),
		'red'));
var _rtfeldman$node_test_runner$Test_Runner_Node$failuresToChalk = F2(
	function (labels, failures) {
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_rtfeldman$node_test_runner$Test_Runner_Node$labelsToChalk(labels),
			A2(_elm_lang$core$List$concatMap, _rtfeldman$node_test_runner$Test_Runner_Node$failureToChalk, failures));
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$chalkAllFailures = F2(
	function (emit, _p6) {
		var _p7 = _p6;
		var _p8 = A2(_elm_lang$core$List$filterMap, _elm_community$elm_test$Expect$getFailure, _p7.expectations);
		if (_p8.ctor === '[]') {
			return _elm_lang$core$Platform_Cmd$none;
		} else {
			return A2(
				_rtfeldman$node_test_runner$Test_Runner_Node$chalkWith,
				emit,
				A2(_rtfeldman$node_test_runner$Test_Runner_Node$failuresToChalk, _p7.labels, _p8));
		}
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$Model = F6(
	function (a, b, c, d, e, f) {
		return {available: a, running: b, queue: c, startTime: d, finishTime: e, completed: f};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$TestResult = F3(
	function (a, b, c) {
		return {labels: a, expectations: b, duration: c};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$Failure = F2(
	function (a, b) {
		return {given: a, message: b};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$Options = F2(
	function (a, b) {
		return {runs: a, seed: b};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$Finish = function (a) {
	return {ctor: 'Finish', _0: a};
};
var _rtfeldman$node_test_runner$Test_Runner_Node$Complete = F4(
	function (a, b, c, d) {
		return {ctor: 'Complete', _0: a, _1: b, _2: c, _3: d};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$Dispatch = function (a) {
	return {ctor: 'Dispatch', _0: a};
};
var _rtfeldman$node_test_runner$Test_Runner_Node$dispatch = A3(_elm_lang$core$Task$perform, _rtfeldman$node_test_runner$Test_Runner_Node$never, _rtfeldman$node_test_runner$Test_Runner_Node$Dispatch, _elm_lang$core$Time$now);
var _rtfeldman$node_test_runner$Test_Runner_Node$update = F3(
	function (emit, msg, model) {
		var _p9 = msg;
		switch (_p9.ctor) {
			case 'Finish':
				var stat = F2(
					function (label, value) {
						return _elm_lang$core$Native_List.fromArray(
							[
								{
								styles: _elm_lang$core$Native_List.fromArray(
									['dim']),
								text: label
							},
								{
								styles: _elm_lang$core$Native_List.fromArray(
									[]),
								text: A2(_elm_lang$core$Basics_ops['++'], value, '\n')
							}
							]);
					});
				var duration = _p9._0 - model.startTime;
				var failed = _elm_lang$core$List$length(
					A2(
						_elm_lang$core$List$filter,
						function (_p10) {
							return A2(
								_elm_lang$core$List$all,
								F2(
									function (x, y) {
										return !_elm_lang$core$Native_Utils.eq(x, y);
									})(_elm_community$elm_test$Expect$pass),
								function (_) {
									return _.expectations;
								}(_p10));
						},
						model.completed));
				var passed = _elm_lang$core$List$length(model.completed) - failed;
				var headline = (_elm_lang$core$Native_Utils.cmp(failed, 0) > 0) ? _elm_lang$core$Native_List.fromArray(
					[
						{
						styles: _elm_lang$core$Native_List.fromArray(
							['underline', 'red']),
						text: '\nTEST RUN FAILED\n\n'
					}
					]) : _elm_lang$core$Native_List.fromArray(
					[
						{
						styles: _elm_lang$core$Native_List.fromArray(
							['underline', 'green']),
						text: '\nTEST RUN PASSED\n\n'
					}
					]);
				var summary = _elm_lang$core$Json_Encode$list(
					A2(
						_elm_lang$core$List$map,
						_rtfeldman$node_test_runner$Chalk$encode,
						_elm_lang$core$List$concat(
							_elm_lang$core$Native_List.fromArray(
								[
									headline,
									A2(
									stat,
									'Duration: ',
									_rtfeldman$node_test_runner$Test_Runner_Node$formatDuration(duration)),
									A2(
									stat,
									'Passed:   ',
									_elm_lang$core$Basics$toString(passed)),
									A2(
									stat,
									'Failed:   ',
									_elm_lang$core$Basics$toString(failed))
								]))));
				var exitCode = _elm_lang$core$Native_Utils.eq(failed, 0) ? 0 : 1;
				var data = _elm_lang$core$Json_Encode$object(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'exitCode',
							_1: _elm_lang$core$Json_Encode$int(exitCode)
						},
							{ctor: '_Tuple2', _0: 'message', _1: summary}
						]));
				return A2(
					_rtfeldman$node_test_runner$Test_Runner_Node$warn,
					'Attempted to Dispatch when all tests completed!',
					{
						ctor: '_Tuple2',
						_0: model,
						_1: emit(
							{ctor: '_Tuple2', _0: 'FINISHED', _1: data})
					});
			case 'Complete':
				var result = {labels: _p9._1._0, expectations: _p9._1._1, duration: _p9._3 - _p9._2};
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						completed: A2(_elm_lang$core$List_ops['::'], result, model.completed)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _elm_lang$core$Platform_Cmd$batch(
						_elm_lang$core$Native_List.fromArray(
							[
								A2(_rtfeldman$node_test_runner$Test_Runner_Node$chalkAllFailures, emit, result),
								_rtfeldman$node_test_runner$Test_Runner_Node$dispatch
							]))
				};
			default:
				var _p11 = model.queue;
				if (_p11.ctor === '[]') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: A3(_elm_lang$core$Task$perform, _rtfeldman$node_test_runner$Test_Runner_Node$never, _rtfeldman$node_test_runner$Test_Runner_Node$Finish, _elm_lang$core$Time$now)
					};
				} else {
					var _p13 = _p11._0;
					var _p12 = A2(_elm_lang$core$Dict$get, _p13, model.available);
					if (_p12.ctor === 'Nothing') {
						return A2(
							_rtfeldman$node_test_runner$Test_Runner_Node$warn,
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Could not find testId ',
								_elm_lang$core$Basics$toString(_p13)),
							{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
					} else {
						var available = A2(_elm_lang$core$Dict$remove, _p13, model.available);
						var newModel = _elm_lang$core$Native_Utils.update(
							model,
							{available: available, queue: _p11._1});
						var complete = A3(
							_rtfeldman$node_test_runner$Test_Runner_Node$Complete,
							_p13,
							_p12._0(
								{ctor: '_Tuple0'}),
							_p9._0);
						return {
							ctor: '_Tuple2',
							_0: newModel,
							_1: A3(_elm_lang$core$Task$perform, _rtfeldman$node_test_runner$Test_Runner_Node$never, complete, _elm_lang$core$Time$now)
						};
					}
				}
		}
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$init = F2(
	function (emit, _p14) {
		var _p15 = _p14;
		var indexedThunks = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			_p15.thunks);
		var testCount = _elm_lang$core$List$length(indexedThunks);
		var reportCmd = A2(
			_rtfeldman$node_test_runner$Test_Runner_Node$reportBegin,
			emit,
			{testCount: testCount, initialSeed: _p15.initialSeed});
		var model = {
			available: _elm_lang$core$Dict$fromList(indexedThunks),
			running: _elm_lang$core$Set$empty,
			queue: A2(_elm_lang$core$List$map, _elm_lang$core$Basics$fst, indexedThunks),
			completed: _elm_lang$core$Native_List.fromArray(
				[]),
			startTime: _p15.startTime,
			finishTime: _elm_lang$core$Maybe$Nothing
		};
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(
				_elm_lang$core$Native_List.fromArray(
					[_rtfeldman$node_test_runner$Test_Runner_Node$dispatch, reportCmd]))
		};
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$runWithOptions = F2(
	function (_p16, emit) {
		var _p17 = _p16;
		return A2(
			_rtfeldman$node_test_runner$Test_Runner_Node_App$run,
			{runs: _p17.runs, seed: _p17.seed},
			{
				init: _rtfeldman$node_test_runner$Test_Runner_Node$init(emit),
				update: _rtfeldman$node_test_runner$Test_Runner_Node$update(emit),
				subscriptions: function (_p18) {
					return _elm_lang$core$Platform_Sub$none;
				}
			});
	});
var _rtfeldman$node_test_runner$Test_Runner_Node$run = _rtfeldman$node_test_runner$Test_Runner_Node$runWithOptions(_rtfeldman$node_test_runner$Test_Runner_Node$defaultOptions);

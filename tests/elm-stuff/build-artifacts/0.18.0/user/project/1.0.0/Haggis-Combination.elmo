var _user$project$Haggis_Combination$isSequence = function (s) {
	var _p0 = s;
	if (_p0.ctor === 'Nothing') {
		return false;
	} else {
		return true;
	}
};
var _user$project$Haggis_Combination$keepJustSequences = function (sequences) {
	var justSequences = A2(_elm_lang$core$List$filter, _user$project$Haggis_Combination$isSequence, sequences);
	var _p1 = justSequences;
	if (_p1.ctor === '[]') {
		return {
			ctor: '::',
			_0: _elm_lang$core$Maybe$Nothing,
			_1: {ctor: '[]'}
		};
	} else {
		return justSequences;
	}
};
var _user$project$Haggis_Combination$collectCardsWithRanks = F2(
	function (ranks, cards) {
		return A2(
			_elm_lang$core$List$map,
			function (r) {
				return A2(
					_elm_lang$core$List$filter,
					function (c) {
						return _elm_lang$core$Native_Utils.eq(
							_user$project$Haggis_Card$order(c),
							r);
					},
					cards);
			},
			ranks);
	});
var _user$project$Haggis_Combination$countWildsNeeded = F2(
	function (setSize, sets) {
		return _elm_lang$core$List$sum(
			A2(
				_elm_lang$core$List$map,
				function (s) {
					return setSize - _elm_lang$core$List$length(s);
				},
				sets));
	});
var _user$project$Haggis_Combination$hasEnoughCards = F2(
	function (setSize, cardCount) {
		return (_elm_lang$core$Native_Utils.eq(setSize, 1) && (_elm_lang$core$Native_Utils.cmp(cardCount, 3) > -1)) || ((_elm_lang$core$Native_Utils.cmp(setSize, 1) > 0) && (_elm_lang$core$Native_Utils.cmp(cardCount, setSize * 2) > -1));
	});
var _user$project$Haggis_Combination$findLowestOrder = function (cards) {
	return _elm_lang$core$List$minimum(
		A2(_elm_lang$core$List$map, _user$project$Haggis_Card$order, cards));
};
var _user$project$Haggis_Combination$collectRanksInRun = F2(
	function (runLength, cards) {
		var lowestOrder = _user$project$Haggis_Combination$findLowestOrder(cards);
		var _p2 = lowestOrder;
		if (_p2.ctor === 'Just') {
			var _p4 = _p2._0;
			var high = (_p4 + runLength) - 1;
			var highestRank = _user$project$Haggis_Card$toRank(high);
			var _p3 = highestRank;
			if (_p3.ctor === 'Just') {
				return _elm_lang$core$Maybe$Just(
					{
						ctor: '_Tuple2',
						_0: _p3._0,
						_1: A2(_elm_lang$core$List$range, _p4, high)
					});
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Haggis_Combination$dropDuplicates_ = F2(
	function (existing, remaining) {
		dropDuplicates_:
		while (true) {
			var _p5 = remaining;
			if (_p5.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p7 = _p5._1;
				var _p6 = _p5._0;
				if (A2(_elm_lang$core$List$member, _p6, existing)) {
					var _v5 = existing,
						_v6 = _p7;
					existing = _v5;
					remaining = _v6;
					continue dropDuplicates_;
				} else {
					return {
						ctor: '::',
						_0: _p6,
						_1: A2(
							_user$project$Haggis_Combination$dropDuplicates_,
							{ctor: '::', _0: _p6, _1: existing},
							_p7)
					};
				}
			}
		}
	});
var _user$project$Haggis_Combination$dropDuplicates = function (suits) {
	return A2(
		_user$project$Haggis_Combination$dropDuplicates_,
		{ctor: '[]'},
		suits);
};
var _user$project$Haggis_Combination$countSuits = function (cards) {
	return _elm_lang$core$List$length(
		_user$project$Haggis_Combination$dropDuplicates(
			A2(_elm_lang$core$List$map, _user$project$Haggis_Card$suit, cards)));
};
var _user$project$Haggis_Combination$hasFourSuits = function (cards) {
	return _elm_lang$core$Native_Utils.eq(
		_user$project$Haggis_Combination$countSuits(cards),
		4);
};
var _user$project$Haggis_Combination$hasSameSuit = F2(
	function (c1, c2) {
		return _elm_lang$core$Native_Utils.eq(
			_user$project$Haggis_Card$suit(c1),
			_user$project$Haggis_Card$suit(c2));
	});
var _user$project$Haggis_Combination$allSameSuit = function (cards) {
	var _p8 = cards;
	if (_p8.ctor === '::') {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Combination$hasSameSuit(_p8._0),
			_p8._1);
	} else {
		return false;
	}
};
var _user$project$Haggis_Combination$findRank = function (cards) {
	findRank:
	while (true) {
		var _p9 = cards;
		if (_p9.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			if (_p9._1.ctor === '[]') {
				return _elm_lang$core$Maybe$Just(
					_user$project$Haggis_Card$rank(_p9._0));
			} else {
				var _p11 = _p9._0;
				var _p10 = _p11.suit;
				if (_p10.ctor === 'Wild') {
					var _v10 = _p9._1;
					cards = _v10;
					continue findRank;
				} else {
					return _elm_lang$core$Maybe$Just(
						_user$project$Haggis_Card$rank(_p11));
				}
			}
		}
	}
};
var _user$project$Haggis_Combination$allSameRank = function (cards) {
	var _p12 = cards;
	if (_p12.ctor === '[]') {
		return false;
	} else {
		return A2(
			_elm_lang$core$List$all,
			_user$project$Haggis_Card$equal(_p12._0),
			_p12._1);
	}
};
var _user$project$Haggis_Combination$split = function (cards) {
	return A2(_elm_lang$core$List$partition, _user$project$Haggis_Card$isNatural, cards);
};
var _user$project$Haggis_Combination$canFormSequence = F3(
	function (setSize, ranks, cards) {
		var wildsNeeded = A2(
			_user$project$Haggis_Combination$countWildsNeeded,
			setSize,
			A2(_user$project$Haggis_Combination$collectCardsWithRanks, ranks, cards));
		var _p13 = _user$project$Haggis_Combination$split(cards);
		var naturals = _p13._0;
		var wilds = _p13._1;
		var wildsUsed = _elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				function (w) {
					return A2(
						_elm_lang$core$List$member,
						_user$project$Haggis_Card$order(w),
						ranks);
				},
				wilds));
		return _elm_lang$core$Native_Utils.eq(
			wildsNeeded,
			_elm_lang$core$List$length(wilds) - wildsUsed);
	});
var _user$project$Haggis_Combination$Bomb = {ctor: 'Bomb'};
var _user$project$Haggis_Combination$Sequence = {ctor: 'Sequence'};
var _user$project$Haggis_Combination$Set = {ctor: 'Set'};
var _user$project$Haggis_Combination$EightOfAKind = function (a) {
	return {ctor: 'EightOfAKind', _0: a};
};
var _user$project$Haggis_Combination$SevenOfAKind = function (a) {
	return {ctor: 'SevenOfAKind', _0: a};
};
var _user$project$Haggis_Combination$SixOfAKind = function (a) {
	return {ctor: 'SixOfAKind', _0: a};
};
var _user$project$Haggis_Combination$FiveOfAKind = function (a) {
	return {ctor: 'FiveOfAKind', _0: a};
};
var _user$project$Haggis_Combination$FourOfAKind = function (a) {
	return {ctor: 'FourOfAKind', _0: a};
};
var _user$project$Haggis_Combination$Triple = function (a) {
	return {ctor: 'Triple', _0: a};
};
var _user$project$Haggis_Combination$Pair = function (a) {
	return {ctor: 'Pair', _0: a};
};
var _user$project$Haggis_Combination$Single = function (a) {
	return {ctor: 'Single', _0: a};
};
var _user$project$Haggis_Combination$makeSet = function (cards) {
	var highestRank = _user$project$Haggis_Combination$findRank(cards);
	var _p14 = highestRank;
	if (_p14.ctor === 'Just') {
		var _p16 = _p14._0;
		var _p15 = _elm_lang$core$List$length(cards);
		switch (_p15) {
			case 1:
				return _elm_lang$core$Maybe$Just(
					_user$project$Haggis_Combination$Single(_p16));
			case 2:
				return _elm_lang$core$Maybe$Just(
					_user$project$Haggis_Combination$Pair(_p16));
			case 3:
				return _elm_lang$core$Maybe$Just(
					_user$project$Haggis_Combination$Triple(_p16));
			case 4:
				return _elm_lang$core$Maybe$Just(
					_user$project$Haggis_Combination$FourOfAKind(_p16));
			case 5:
				return _elm_lang$core$Maybe$Just(
					_user$project$Haggis_Combination$FiveOfAKind(_p16));
			case 6:
				return _elm_lang$core$Maybe$Just(
					_user$project$Haggis_Combination$SixOfAKind(_p16));
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Haggis_Combination$set = function (cards) {
	var highestRank = _user$project$Haggis_Combination$findRank(cards);
	var _p17 = _user$project$Haggis_Combination$split(cards);
	var naturals = _p17._0;
	var wilds = _p17._1;
	var _p18 = highestRank;
	if (_p18.ctor === 'Just') {
		return _user$project$Haggis_Combination$allSameRank(naturals) ? _user$project$Haggis_Combination$makeSet(cards) : ((_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(wilds),
			1) && _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$length(cards),
			1)) ? _elm_lang$core$Maybe$Just(
			_user$project$Haggis_Combination$Single(_p18._0)) : _elm_lang$core$Maybe$Nothing);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _user$project$Haggis_Combination$RunOfSixOfAKinds = F2(
	function (a, b) {
		return {ctor: 'RunOfSixOfAKinds', _0: a, _1: b};
	});
var _user$project$Haggis_Combination$RunOfFiveOfAKinds = F2(
	function (a, b) {
		return {ctor: 'RunOfFiveOfAKinds', _0: a, _1: b};
	});
var _user$project$Haggis_Combination$RunOfFourOfAKinds = F2(
	function (a, b) {
		return {ctor: 'RunOfFourOfAKinds', _0: a, _1: b};
	});
var _user$project$Haggis_Combination$RunOfTriples = F2(
	function (a, b) {
		return {ctor: 'RunOfTriples', _0: a, _1: b};
	});
var _user$project$Haggis_Combination$RunOfPairs = F2(
	function (a, b) {
		return {ctor: 'RunOfPairs', _0: a, _1: b};
	});
var _user$project$Haggis_Combination$RunOfSingles = F2(
	function (a, b) {
		return {ctor: 'RunOfSingles', _0: a, _1: b};
	});
var _user$project$Haggis_Combination$makeSequence = F3(
	function (runLength, setSize, rank) {
		var _p19 = setSize;
		switch (_p19) {
			case 1:
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Haggis_Combination$RunOfSingles, runLength, rank));
			case 2:
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Haggis_Combination$RunOfPairs, runLength, rank));
			case 3:
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Haggis_Combination$RunOfTriples, runLength, rank));
			case 4:
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Haggis_Combination$RunOfFourOfAKinds, runLength, rank));
			case 5:
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Haggis_Combination$RunOfFiveOfAKinds, runLength, rank));
			case 6:
				return _elm_lang$core$Maybe$Just(
					A2(_user$project$Haggis_Combination$RunOfSixOfAKinds, runLength, rank));
			default:
				return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Haggis_Combination$maybeRunOfSets = F2(
	function (cards, setSize) {
		var cardCount = _elm_lang$core$List$length(cards);
		var runLength = (cardCount / setSize) | 0;
		var _p20 = _user$project$Haggis_Combination$split(cards);
		var naturals = _p20._0;
		var wilds = _p20._1;
		var ranksInRun = A2(_user$project$Haggis_Combination$collectRanksInRun, runLength, naturals);
		var _p21 = ranksInRun;
		if ((_p21.ctor === 'Just') && (_p21._0.ctor === '_Tuple2')) {
			return (A2(_user$project$Haggis_Combination$hasEnoughCards, setSize, cardCount) && (_elm_lang$core$Native_Utils.eq(cardCount, runLength * setSize) && A3(_user$project$Haggis_Combination$canFormSequence, setSize, _p21._0._1, cards))) ? A3(_user$project$Haggis_Combination$makeSequence, runLength, setSize, _p21._0._0) : _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _user$project$Haggis_Combination$sequence = function (cards) {
	var _p22 = _user$project$Haggis_Combination$split(cards);
	var naturals = _p22._0;
	var wilds = _p22._1;
	var setSizes = A2(
		_elm_lang$core$List$range,
		_user$project$Haggis_Combination$countSuits(naturals),
		_user$project$Haggis_Combination$countSuits(cards));
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(naturals),
		0) ? {
		ctor: '::',
		_0: _elm_lang$core$Maybe$Nothing,
		_1: {ctor: '[]'}
	} : _user$project$Haggis_Combination$keepJustSequences(
		A2(
			_elm_lang$core$List$map,
			_user$project$Haggis_Combination$maybeRunOfSets(cards),
			setSizes));
};
var _user$project$Haggis_Combination$Suited = {ctor: 'Suited'};
var _user$project$Haggis_Combination$JQK = {ctor: 'JQK'};
var _user$project$Haggis_Combination$QK = {ctor: 'QK'};
var _user$project$Haggis_Combination$JK = {ctor: 'JK'};
var _user$project$Haggis_Combination$JQ = {ctor: 'JQ'};
var _user$project$Haggis_Combination$Rainbow = {ctor: 'Rainbow'};
var _user$project$Haggis_Combination$bomb = function (cards) {
	var ranks = A2(
		_elm_lang$core$List$sortWith,
		_user$project$Haggis_Card$byRank,
		A2(_elm_lang$core$List$map, _user$project$Haggis_Card$rank, cards));
	var _p23 = ranks;
	_v17_5:
	do {
		if ((_p23.ctor === '::') && (_p23._1.ctor === '::')) {
			if (_p23._1._1.ctor === '[]') {
				switch (_p23._0.ctor) {
					case 'Jack':
						switch (_p23._1._0.ctor) {
							case 'Queen':
								return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQ);
							case 'King':
								return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JK);
							default:
								break _v17_5;
						}
					case 'Queen':
						if (_p23._1._0.ctor === 'King') {
							return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$QK);
						} else {
							break _v17_5;
						}
					default:
						break _v17_5;
				}
			} else {
				if (_p23._1._1._1.ctor === '[]') {
					if (((_p23._0.ctor === 'Jack') && (_p23._1._0.ctor === 'Queen')) && (_p23._1._1._0.ctor === 'King')) {
						return _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$JQK);
					} else {
						break _v17_5;
					}
				} else {
					if (((((_p23._0.ctor === 'Three') && (_p23._1._0.ctor === 'Five')) && (_p23._1._1._0.ctor === 'Seven')) && (_p23._1._1._1._0.ctor === 'Nine')) && (_p23._1._1._1._1.ctor === '[]')) {
						return _user$project$Haggis_Combination$allSameSuit(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Suited) : (_user$project$Haggis_Combination$hasFourSuits(cards) ? _elm_lang$core$Maybe$Just(_user$project$Haggis_Combination$Rainbow) : _elm_lang$core$Maybe$Nothing);
					} else {
						break _v17_5;
					}
				}
			}
		} else {
			break _v17_5;
		}
	} while(false);
	return _elm_lang$core$Maybe$Nothing;
};

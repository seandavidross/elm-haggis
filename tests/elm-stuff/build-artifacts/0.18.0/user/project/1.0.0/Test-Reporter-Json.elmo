var _user$project$Test_Reporter_Json$encodeReasonType = F2(
	function (reasonType, data) {
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'type',
					_1: _elm_lang$core$Json_Encode$string('custom')
				},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'data', _1: data},
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$Test_Reporter_Json$encodeReason = F2(
	function (description, reason) {
		var _p0 = reason;
		switch (_p0.ctor) {
			case 'Custom':
				return A2(
					_user$project$Test_Reporter_Json$encodeReasonType,
					'Custom',
					_elm_lang$core$Json_Encode$string(description));
			case 'Equality':
				return A2(
					_user$project$Test_Reporter_Json$encodeReasonType,
					'Equality',
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'expected',
								_1: _elm_lang$core$Json_Encode$string(_p0._0)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'actual',
									_1: _elm_lang$core$Json_Encode$string(_p0._1)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'comparison',
										_1: _elm_lang$core$Json_Encode$string(description)
									},
									_1: {ctor: '[]'}
								}
							}
						}));
			case 'Comparison':
				return A2(
					_user$project$Test_Reporter_Json$encodeReasonType,
					'Comparison',
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'first',
								_1: _elm_lang$core$Json_Encode$string(_p0._0)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'second',
									_1: _elm_lang$core$Json_Encode$string(_p0._1)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'comparison',
										_1: _elm_lang$core$Json_Encode$string(description)
									},
									_1: {ctor: '[]'}
								}
							}
						}));
			case 'TODO':
				return A2(
					_user$project$Test_Reporter_Json$encodeReasonType,
					'TODO',
					_elm_lang$core$Json_Encode$string(description));
			case 'Invalid':
				if (_p0._0.ctor === 'BadDescription') {
					var explanation = _elm_lang$core$Native_Utils.eq(description, '') ? 'The empty string is not a valid test description.' : A2(_elm_lang$core$Basics_ops['++'], 'This is an invalid test description: ', description);
					return A2(
						_user$project$Test_Reporter_Json$encodeReasonType,
						'Invalid',
						_elm_lang$core$Json_Encode$string(explanation));
				} else {
					return A2(
						_user$project$Test_Reporter_Json$encodeReasonType,
						'Invalid',
						_elm_lang$core$Json_Encode$string(description));
				}
			case 'ListDiff':
				return A2(
					_user$project$Test_Reporter_Json$encodeReasonType,
					'ListDiff',
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'expected',
								_1: _elm_lang$core$Json_Encode$list(
									A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p0._0))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'actual',
									_1: _elm_lang$core$Json_Encode$list(
										A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p0._1))
								},
								_1: {ctor: '[]'}
							}
						}));
			default:
				return A2(
					_user$project$Test_Reporter_Json$encodeReasonType,
					'CollectionDiff',
					_elm_lang$core$Json_Encode$object(
						{
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'expected',
								_1: _elm_lang$core$Json_Encode$string(_p0._0.expected)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'actual',
									_1: _elm_lang$core$Json_Encode$string(_p0._0.actual)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'extra',
										_1: _elm_lang$core$Json_Encode$list(
											A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p0._0.extra))
									},
									_1: {
										ctor: '::',
										_0: {
											ctor: '_Tuple2',
											_0: 'missing',
											_1: _elm_lang$core$Json_Encode$list(
												A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p0._0.missing))
										},
										_1: {ctor: '[]'}
									}
								}
							}
						}));
		}
	});
var _user$project$Test_Reporter_Json$encodeFailure = function (_p1) {
	var _p2 = _p1;
	var _p3 = _p2.description;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'given',
				_1: A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Json_Encode$null,
					A2(_elm_lang$core$Maybe$map, _elm_lang$core$Json_Encode$string, _p2.given))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'message',
					_1: _elm_lang$core$Json_Encode$string(_p3)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'reason',
						_1: A2(_user$project$Test_Reporter_Json$encodeReason, _p3, _p2.reason)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Test_Reporter_Json$reportSummary = F2(
	function (_p4, autoFail) {
		var _p5 = _p4;
		return _elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'event',
					_1: _elm_lang$core$Json_Encode$string('runComplete')
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'passed',
						_1: _elm_lang$core$Json_Encode$string(
							_elm_lang$core$Basics$toString(_p5.passed))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'failed',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$Basics$toString(_p5.failed))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'duration',
								_1: _elm_lang$core$Json_Encode$string(
									_elm_lang$core$Basics$toString(_p5.duration))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'autoFail',
									_1: A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Json_Encode$null,
										A2(_elm_lang$core$Maybe$map, _elm_lang$core$Json_Encode$string, autoFail))
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$Test_Reporter_Json$encodeLabels = function (labels) {
	return _elm_lang$core$Json_Encode$list(
		A2(
			_elm_lang$core$List$map,
			_elm_lang$core$Json_Encode$string,
			_elm_lang$core$List$reverse(labels)));
};
var _user$project$Test_Reporter_Json$getStatus = function (outcome) {
	var _p6 = outcome;
	switch (_p6.ctor) {
		case 'Failed':
			return 'fail';
		case 'Todo':
			return 'todo';
		default:
			return 'pass';
	}
};
var _user$project$Test_Reporter_Json$encodeFailures = function (outcome) {
	var _p7 = outcome;
	switch (_p7.ctor) {
		case 'Failed':
			return A2(_elm_lang$core$List$map, _user$project$Test_Reporter_Json$encodeFailure, _p7._0);
		case 'Todo':
			return {
				ctor: '::',
				_0: _elm_lang$core$Json_Encode$string(_p7._0),
				_1: {ctor: '[]'}
			};
		default:
			return {ctor: '[]'};
	}
};
var _user$project$Test_Reporter_Json$reportComplete = function (_p8) {
	var _p9 = _p8;
	var _p10 = _p9.outcome;
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'event',
				_1: _elm_lang$core$Json_Encode$string('testCompleted')
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'status',
					_1: _elm_lang$core$Json_Encode$string(
						_user$project$Test_Reporter_Json$getStatus(_p10))
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'labels',
						_1: _user$project$Test_Reporter_Json$encodeLabels(_p9.labels)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'failures',
							_1: _elm_lang$core$Json_Encode$list(
								_user$project$Test_Reporter_Json$encodeFailures(_p10))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'duration',
								_1: _elm_lang$core$Json_Encode$string(
									_elm_lang$core$Basics$toString(_p9.duration))
							},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$Test_Reporter_Json$reportBegin = function (_p11) {
	var _p12 = _p11;
	return _elm_lang$core$Maybe$Just(
		_elm_lang$core$Json_Encode$object(
			{
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'event',
					_1: _elm_lang$core$Json_Encode$string('runStart')
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'testCount',
						_1: _elm_lang$core$Json_Encode$string(
							_elm_lang$core$Basics$toString(_p12.testCount))
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'fuzzRuns',
							_1: _elm_lang$core$Json_Encode$string(
								_elm_lang$core$Basics$toString(_p12.fuzzRuns))
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'paths',
								_1: _elm_lang$core$Json_Encode$list(
									A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p12.paths))
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'initialSeed',
									_1: _elm_lang$core$Json_Encode$string(
										_elm_lang$core$Basics$toString(_p12.initialSeed))
								},
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}));
};
